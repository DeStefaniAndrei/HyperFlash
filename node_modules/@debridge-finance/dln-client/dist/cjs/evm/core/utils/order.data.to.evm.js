"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.orderToEvm = void 0;
const solana_utils_1 = require("@debridge-finance/solana-utils");
const order_1 = require("../../../order");
function formatExternalCall(externalCall, useHash) {
    if (externalCall) {
        return solana_utils_1.helpers.bufferToHex(useHash ? order_1.Order.getExternalCallHash(externalCall) : externalCall.externalCallData);
    }
    else
        return "0x";
}
function orderToEvm(order, useExtCallHash = false) {
    if ("nonce" in order && order.nonce !== undefined) {
        return {
            makerOrderNonce: order.nonce.toString(),
            makerSrc: order.maker,
            giveAmount: String(order.give.amount),
            giveChainId: Number(order.give.chainId),
            giveTokenAddress: solana_utils_1.helpers.bufferToHex(Buffer.from(order.give.tokenAddress)),
            takeAmount: String(order.take.amount),
            takeChainId: Number(order.take.chainId),
            takeTokenAddress: solana_utils_1.helpers.bufferToHex(Buffer.from(order.take.tokenAddress)),
            receiverDst: order.receiver,
            allowedCancelBeneficiarySrc: order.allowedCancelBeneficiary || "0x",
            allowedTakerDst: order.allowedTaker || "0x",
            externalCall: formatExternalCall(order.externalCall, useExtCallHash),
            givePatchAuthoritySrc: solana_utils_1.helpers.bufferToHex(Buffer.from(order.givePatchAuthority)),
            orderAuthorityAddressDst: order.orderAuthorityDstAddress,
        };
    }
    return {
        giveAmount: String(order.give.amount),
        giveChainId: Number(order.give.chainId),
        giveTokenAddress: solana_utils_1.helpers.bufferToHex(Buffer.from(order.give.tokenAddress)),
        takeAmount: String(order.take.amount),
        takeChainId: Number(order.take.chainId),
        takeTokenAddress: solana_utils_1.helpers.bufferToHex(Buffer.from(order.take.tokenAddress)),
        receiverDst: order.receiver,
        allowedCancelBeneficiarySrc: order.allowedCancelBeneficiary || "0x",
        allowedTakerDst: order.allowedTaker || "0x",
        externalCall: formatExternalCall(order.externalCall, useExtCallHash),
        givePatchAuthoritySrc: solana_utils_1.helpers.bufferToHex(Buffer.from(order.givePatchAuthority)),
        orderAuthorityAddressDst: order.orderAuthorityDstAddress,
    };
}
exports.orderToEvm = orderToEvm;
//# sourceMappingURL=order.data.to.evm.js.map