"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEvmTokenSymbol = exports.getEvmTokenName = exports.getEvmAccountBalance = exports.getEvmDecimals = void 0;
const common_types_1 = require("../../../common.types");
const nativeTokenInfo = {
    [common_types_1.ChainId.Polygon]: {
        name: "Polygon",
        symbol: "MATIC",
    },
    [common_types_1.ChainId.BSC]: {
        name: "BNB",
        symbol: "BNB",
    },
    [common_types_1.ChainId.Ethereum]: {
        name: "Ethereum",
        symbol: "ETH",
    },
    [common_types_1.ChainId.Arbitrum]: {
        name: "Ethereum",
        symbol: "ETH",
    },
    [common_types_1.ChainId.Avalanche]: {
        name: "Avalanche",
        symbol: "AVAX",
    },
    [common_types_1.ChainId.Fantom]: {
        name: "Fantom",
        symbol: "FTM",
    },
    [common_types_1.ChainId.Linea]: {
        name: "Ethereum",
        symbol: "ETH",
    },
    [common_types_1.ChainId.Optimism]: {
        name: "Ethereum",
        symbol: "ETH",
    },
    [common_types_1.ChainId.Base]: {
        name: "Ethereum",
        symbol: "ETH",
    },
    [common_types_1.ChainId.Neon]: {
        name: "Neon",
        symbol: "NEON",
    },
    [common_types_1.ChainId.Gnosis]: {
        name: "xDAI",
        symbol: "XDAI",
    },
    [common_types_1.ChainId.LightLink]: {
        name: "Ethereum",
        symbol: "ETH",
    },
    [common_types_1.ChainId.Metis]: {
        name: "Metis",
        symbol: "METIS",
    },
    [common_types_1.ChainId.Bitrock]: {
        name: "Bitrock",
        symbol: "BROCK",
    },
};
const IERC20Abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "balanceOf",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "decimals",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "name",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "symbol",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
//#endregion
async function getEvmDecimals(address, web3) {
    if (address === common_types_1.ZERO_EVM_ADDRESS) {
        return 18;
    }
    const contract = new web3.eth.Contract(IERC20Abi, address);
    const decimals = await contract.methods.decimals().call();
    return parseInt(decimals);
}
exports.getEvmDecimals = getEvmDecimals;
const getEvmAccountBalance = async (tokenAddress, address, web3) => {
    if (tokenAddress === common_types_1.ZERO_EVM_ADDRESS) {
        return BigInt(await web3.eth.getBalance(address));
    }
    const contract = new web3.eth.Contract(IERC20Abi, tokenAddress);
    return BigInt((await contract.methods.balanceOf(address).call()));
};
exports.getEvmAccountBalance = getEvmAccountBalance;
async function getEvmTokenName(address, chainId, web3) {
    if (address === common_types_1.ZERO_EVM_ADDRESS) {
        return nativeTokenInfo[chainId].name;
    }
    const contract = new web3.eth.Contract(IERC20Abi, address);
    const result = await contract.methods.name().call();
    return result;
}
exports.getEvmTokenName = getEvmTokenName;
async function getEvmTokenSymbol(address, chainId, web3) {
    if (address === common_types_1.ZERO_EVM_ADDRESS) {
        return nativeTokenInfo[chainId].symbol;
    }
    const contract = new web3.eth.Contract(IERC20Abi, address);
    const result = await contract.methods.symbol().call();
    return result;
}
exports.getEvmTokenSymbol = getEvmTokenSymbol;
//# sourceMappingURL=get.evm.info.js.map