"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCorrectedGasLimit = exports.ETH_TRANSFER_REFERENCE = exports.predictGasPrice = exports.setPredictGasPriceCachedChains = exports.setPredictGasPriceNodeCache = void 0;
const tslib_1 = require("tslib");
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const node_cache_1 = tslib_1.__importDefault(require("node-cache"));
const common_types_1 = require("../../../common.types");
let predictGasPriceNodeCache = new node_cache_1.default({ stdTTL: 15 * 60 });
let predictGasPriceCachedChains = [common_types_1.ChainId.Neon];
function setPredictGasPriceNodeCache(newNodeCache) {
    predictGasPriceNodeCache = newNodeCache;
}
exports.setPredictGasPriceNodeCache = setPredictGasPriceNodeCache;
function setPredictGasPriceCachedChains(chains) {
    predictGasPriceCachedChains = chains;
}
exports.setPredictGasPriceCachedChains = setPredictGasPriceCachedChains;
const predictGasPrice = async (chainId, provider, orderEstimationStage) => {
    let gasPrice;
    if (predictGasPriceNodeCache.has(chainId) && predictGasPriceCachedChains.includes(chainId)) {
        gasPrice = new bignumber_js_1.default(predictGasPriceNodeCache.get(chainId));
    }
    else {
        const web3GasPrice = await provider.eth.getGasPrice();
        gasPrice = new bignumber_js_1.default(web3GasPrice);
        if (predictGasPriceCachedChains.includes(chainId)) {
            predictGasPriceNodeCache.set(chainId, web3GasPrice);
        }
    }
    return gasPrice;
};
exports.predictGasPrice = predictGasPrice;
exports.ETH_TRANSFER_REFERENCE = 21000;
const getCorrectedGasLimit = async (chain, provider, estimation) => {
    const estimationBN = (0, bignumber_js_1.default)(estimation);
    if (chain === common_types_1.ChainId.Arbitrum) {
        const transferTx = {
            from: "0x0aee3e5871254d40084a6758d85ac453c1f12fca",
            data: "0x",
            value: 1,
            to: "0x0aee3e5871254d40084a6758d85ac453c1f12fca",
        };
        // gas limit to transfer 1 wei in the Arbitrum network
        const arbGaslimitTransfer = await provider.eth.estimateGas(transferTx);
        /*
        current transfer / reference transfer = current estimation / reference estimation
        ->
        currentEstimation = (current transfer * reference estimation) / reference transfer
        */
        const result = estimationBN.multipliedBy(arbGaslimitTransfer).dividedBy(exports.ETH_TRANSFER_REFERENCE);
        return result.integerValue();
    }
    else {
        return estimationBN.integerValue();
    }
};
exports.getCorrectedGasLimit = getCorrectedGasLimit;
//# sourceMappingURL=gasprice.service.js.map