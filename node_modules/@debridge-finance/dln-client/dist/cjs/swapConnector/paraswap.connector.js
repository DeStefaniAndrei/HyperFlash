"use strict";
var _ParaswapConnector_instances, _ParaswapConnector_basicUrl, _ParaswapConnector_getDecimalsLambda, _ParaswapConnector_maskCredentialFunction, _ParaswapConnector_timeoutInMs, _ParaswapConnector_excludeDEXS, _ParaswapConnector_apiKey, _ParaswapConnector_disableRFQ, _ParaswapConnector_defaultFeeParameters, _ParaswapConnector_buildQuoteResponse, _ParaswapConnector_buildSwapResponse, _ParaswapConnector_buildBaseRequest, _ParaswapConnector_buildSwapRequest, _ParaswapConnector_buildSwapWithRouteHintRequest, _ParaswapConnector_nativeAddressToEvmFormat, _ParaswapConnector_getAuthHeaders, _ParaswapConnector_setFeeParameters;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParaswapConnector = void 0;
const tslib_1 = require("tslib");
const solana_utils_1 = require("@debridge-finance/solana-utils");
const common_types_1 = require("../common.types");
const __1 = require("..");
const swap_connector_1 = require("./swap.connector");
const swap_connector_logger_1 = require("./swap-connector.logger");
class ParaswapConnector extends swap_connector_1.SwapConnector {
    constructor(config) {
        super();
        _ParaswapConnector_instances.add(this);
        _ParaswapConnector_basicUrl.set(this, void 0);
        _ParaswapConnector_getDecimalsLambda.set(this, void 0);
        _ParaswapConnector_maskCredentialFunction.set(this, (text) => text);
        _ParaswapConnector_timeoutInMs.set(this, void 0);
        _ParaswapConnector_excludeDEXS.set(this, void 0);
        _ParaswapConnector_apiKey.set(this, void 0);
        _ParaswapConnector_disableRFQ.set(this, void 0);
        _ParaswapConnector_defaultFeeParameters.set(this, void 0);
        tslib_1.__classPrivateFieldSet(this, _ParaswapConnector_basicUrl, config.basicUrl, "f");
        tslib_1.__classPrivateFieldSet(this, _ParaswapConnector_getDecimalsLambda, config.getDecimalsLambda, "f");
        tslib_1.__classPrivateFieldSet(this, _ParaswapConnector_timeoutInMs, config.timeoutInMs, "f");
        tslib_1.__classPrivateFieldSet(this, _ParaswapConnector_excludeDEXS, config.excludeDEXS, "f");
        tslib_1.__classPrivateFieldSet(this, _ParaswapConnector_disableRFQ, config.disableRFQ, "f");
        tslib_1.__classPrivateFieldSet(this, _ParaswapConnector_defaultFeeParameters, config.defaultFeeParameters, "f");
        const apiKey = config.apiKey;
        if (apiKey) {
            tslib_1.__classPrivateFieldSet(this, _ParaswapConnector_maskCredentialFunction, (text) => text.replaceAll(apiKey, "<API KEY>"), "f");
            tslib_1.__classPrivateFieldSet(this, _ParaswapConnector_apiKey, apiKey, "f");
        }
    }
    async getSwap(request, context) {
        if (!this.getSupportedChains().includes(request.chainId)) {
            const message = `Chain ${common_types_1.ChainId[request.chainId]} is not supported`;
            throw new __1.SwapConnectorError(ParaswapConnector.name, __1.SwapConnectorErrorType.UnsupportedChain, message);
        }
        const logger = new swap_connector_logger_1.SwapConnectorLogger(context.logger, ParaswapConnector.name, tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_maskCredentialFunction, "f"));
        let routeHint = request.routeHint;
        if (!routeHint && tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_disableRFQ, "f") === false) {
            routeHint = await this.getEstimate(request, context);
        }
        if (routeHint) {
            const rawConnectorResponse = routeHint.rawConnectorResponse;
            if (!rawConnectorResponse) {
                throw new Error("routeHint doesn't contain rawConnectorResponse");
            }
            const txParams = await this.call({
                basicUrl: tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_basicUrl, "f"),
                path: `/transactions/${request.chainId}`,
                query: new URLSearchParams({
                    ignoreChecks: "true",
                }),
                body: JSON.stringify(await tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_buildSwapWithRouteHintRequest).call(this, request, rawConnectorResponse)),
                headers: {
                    ...tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_getAuthHeaders).call(this),
                    "Content-Type": "application/json",
                },
                method: "POST",
                timeoutInMs: tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_timeoutInMs, "f"),
            }, { logger });
            return tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_buildSwapResponse).call(this, request, {
                priceRoute: rawConnectorResponse.priceRoute,
                txParams,
            });
        }
        else {
            const result = await this.call({
                basicUrl: tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_basicUrl, "f"),
                path: "/swap",
                query: new URLSearchParams((await tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_buildSwapRequest).call(this, request))),
                headers: tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_getAuthHeaders).call(this),
                timeoutInMs: tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_timeoutInMs, "f"),
            }, { logger });
            return tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_buildSwapResponse).call(this, request, result);
        }
    }
    async getEstimate(request, context) {
        if (!this.getSupportedChains().includes(request.chainId)) {
            const message = `Chain ${common_types_1.ChainId[request.chainId]} is not supported`;
            throw new __1.SwapConnectorError(ParaswapConnector.name, __1.SwapConnectorErrorType.UnsupportedChain, message);
        }
        const logger = new swap_connector_logger_1.SwapConnectorLogger(context.logger, ParaswapConnector.name, tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_maskCredentialFunction, "f"));
        const result = await this.call({
            basicUrl: tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_basicUrl, "f"),
            path: "/prices",
            query: new URLSearchParams((await tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_buildBaseRequest).call(this, request))),
            headers: tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_getAuthHeaders).call(this),
            timeoutInMs: tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_timeoutInMs, "f"),
        }, { logger });
        return tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_buildQuoteResponse).call(this, request, result);
    }
    getSupportedChains() {
        return [
            common_types_1.ChainId.Ethereum,
            common_types_1.ChainId.Optimism,
            common_types_1.ChainId.BSC,
            common_types_1.ChainId.Polygon,
            common_types_1.ChainId.Fantom,
            common_types_1.ChainId.Base,
            common_types_1.ChainId.Arbitrum,
            common_types_1.ChainId.Avalanche,
        ];
    }
    get connectorName() {
        return "paraswap";
    }
}
exports.ParaswapConnector = ParaswapConnector;
_ParaswapConnector_basicUrl = new WeakMap(), _ParaswapConnector_getDecimalsLambda = new WeakMap(), _ParaswapConnector_maskCredentialFunction = new WeakMap(), _ParaswapConnector_timeoutInMs = new WeakMap(), _ParaswapConnector_excludeDEXS = new WeakMap(), _ParaswapConnector_apiKey = new WeakMap(), _ParaswapConnector_disableRFQ = new WeakMap(), _ParaswapConnector_defaultFeeParameters = new WeakMap(), _ParaswapConnector_instances = new WeakSet(), _ParaswapConnector_buildQuoteResponse = function _ParaswapConnector_buildQuoteResponse(request, priceResult) {
    return {
        chainId: request.chainId,
        fromTokenAddress: request.fromTokenAddress,
        toTokenAddress: request.toTokenAddress,
        amountIn: request.amountIn,
        amountOut: BigInt(priceResult.priceRoute.destAmount),
        rawConnectorResponse: priceResult,
    };
}, _ParaswapConnector_buildSwapResponse = function _ParaswapConnector_buildSwapResponse(request, priceResult) {
    return {
        fromToken: request.fromTokenAddress,
        toToken: request.toTokenAddress,
        amountIn: request.amountIn,
        amountOut: BigInt(priceResult.priceRoute.destAmount),
        rawConnectorResponse: priceResult,
        engine: "evm",
        tx: {
            data: priceResult.txParams.data,
            to: priceResult.txParams.to,
            value: priceResult.txParams.value,
        },
    };
}, _ParaswapConnector_buildBaseRequest = async function _ParaswapConnector_buildBaseRequest(request) {
    const [srcDecimals, destDecimals] = await Promise.all([
        tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_getDecimalsLambda, "f").call(this, request.chainId, request.fromTokenAddress),
        tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_getDecimalsLambda, "f").call(this, request.chainId, request.toTokenAddress),
    ]);
    const res = {
        side: "SELL",
        version: "6.2",
        network: request.chainId.toString(),
        srcToken: tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_nativeAddressToEvmFormat).call(this, request.fromTokenAddress),
        srcDecimals: srcDecimals.toString(),
        destToken: tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_nativeAddressToEvmFormat).call(this, request.toTokenAddress),
        destDecimals: destDecimals.toString(),
        slippage: request.slippageBps.toString(),
        amount: request.amountIn.toString(),
    };
    if (tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_excludeDEXS, "f").length > 0) {
        res.excludeDEXS = tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_excludeDEXS, "f").join(",");
    }
    return res;
}, _ParaswapConnector_buildSwapRequest = async function _ParaswapConnector_buildSwapRequest(request) {
    const query = {
        ...(await tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_buildBaseRequest).call(this, request)),
        userAddress: (0, __1.tokenAddressToString)(request.chainId, request.fromAddress),
        receiver: request.destReceiver ? (0, __1.tokenAddressToString)(request.chainId, request.destReceiver) : undefined,
    };
    tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_setFeeParameters).call(this, request, query);
    return query;
}, _ParaswapConnector_buildSwapWithRouteHintRequest = async function _ParaswapConnector_buildSwapWithRouteHintRequest(request, rawConnectorResponse) {
    const params = await tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_buildBaseRequest).call(this, request);
    const bodyObject = {
        side: params.side,
        network: params.network,
        srcToken: params.srcToken,
        srcDecimals: params.srcDecimals,
        destToken: params.destToken,
        destDecimals: params.destDecimals,
        slippage: params.slippage,
        srcAmount: params.amount,
        priceRoute: rawConnectorResponse.priceRoute,
        userAddress: (0, __1.tokenAddressToString)(request.chainId, request.fromAddress),
        receiver: request.destReceiver ? (0, __1.tokenAddressToString)(request.chainId, request.destReceiver) : undefined,
    };
    tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_instances, "m", _ParaswapConnector_setFeeParameters).call(this, request, bodyObject);
    return bodyObject;
}, _ParaswapConnector_nativeAddressToEvmFormat = function _ParaswapConnector_nativeAddressToEvmFormat(address) {
    let stringified = solana_utils_1.helpers.bufferToHex(address);
    if (stringified === "0x0000000000000000000000000000000000000000") {
        stringified = "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE";
    }
    return stringified;
}, _ParaswapConnector_getAuthHeaders = function _ParaswapConnector_getAuthHeaders() {
    return tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_apiKey, "f")
        ? {
            "x-api-key": tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_apiKey, "f"),
        }
        : {};
}, _ParaswapConnector_setFeeParameters = function _ParaswapConnector_setFeeParameters(request, swapConnectorRequest) {
    if (request.affiliateFeeBps && request.affiliateFeeRecipient) {
        swapConnectorRequest.partnerFeeBps = request.affiliateFeeBps.toString();
        swapConnectorRequest.partnerAddress = (0, __1.tokenAddressToString)(request.chainId, request.affiliateFeeRecipient);
        swapConnectorRequest.isDirectFeeTransfer = "true";
    }
    else {
        const defaultFeeParameters = tslib_1.__classPrivateFieldGet(this, _ParaswapConnector_defaultFeeParameters, "f");
        if (defaultFeeParameters.isDirectFeeTransfer)
            swapConnectorRequest.isDirectFeeTransfer = defaultFeeParameters.isDirectFeeTransfer;
        if (defaultFeeParameters.partnerAddress)
            swapConnectorRequest.partnerAddress = defaultFeeParameters.partnerAddress;
        if (defaultFeeParameters.isSurplusToUser)
            swapConnectorRequest.isSurplusToUser = defaultFeeParameters.isSurplusToUser;
        if (defaultFeeParameters.takeSurplus)
            swapConnectorRequest.takeSurplus = defaultFeeParameters.takeSurplus;
    }
};
//# sourceMappingURL=paraswap.connector.js.map