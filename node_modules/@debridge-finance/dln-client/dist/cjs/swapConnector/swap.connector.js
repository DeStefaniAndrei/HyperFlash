"use strict";
var _SwapConnector_instances, _SwapConnector_fetch;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapConnector = exports.bpsToPercent = void 0;
const tslib_1 = require("tslib");
const common_types_1 = require("../common.types");
const swap_connector_error_1 = require("./errors/swap-connector.error");
const swap_connector_error_type_1 = require("./errors/swap-connector-error.type");
const error_response_1 = require("./errors/error-response");
function bpsToPercent(bps) {
    return (bps * 100) / Number(common_types_1.BPS_DENOMINATOR);
}
exports.bpsToPercent = bpsToPercent;
class SwapConnector {
    constructor() {
        _SwapConnector_instances.add(this);
    }
    async call(params, context) {
        const basicUrl = params.basicUrl.endsWith("/")
            ? params.basicUrl.slice(0, params.basicUrl.length - 1)
            : params.basicUrl;
        const url = `${basicUrl}${params.path}?${params.query.toString()}`;
        const response = await tslib_1.__classPrivateFieldGet(this, _SwapConnector_instances, "m", _SwapConnector_fetch).call(this, url, {
            headers: params.headers,
            body: params.body,
            method: params.method,
            signal: params.timeoutInMs ? AbortSignal.timeout(params.timeoutInMs) : undefined,
        }, context.logger);
        const data = await response.text();
        if (!response.ok) {
            throw new error_response_1.ErrorResponse(response.status, response.statusText || `Request is failed`, data);
        }
        return JSON.parse(data);
    }
}
exports.SwapConnector = SwapConnector;
_SwapConnector_instances = new WeakSet(), _SwapConnector_fetch = async function _SwapConnector_fetch(url, request, logger) {
    const parsedUrl = new URL(url);
    const reqCtx = {
        url: parsedUrl.href,
        pathname: parsedUrl.pathname,
        host: parsedUrl.host,
        request,
        type: "external_request",
    };
    logger.log(reqCtx, `Swap request`);
    const startedAt = new Date().getTime();
    let response;
    try {
        response = await fetch(url, request);
        const resp = (await response.clone().json()) ?? null;
        const resCtx = {
            ...reqCtx,
            response: resp,
            duration: Date.now() - startedAt,
        };
        logger.log(resCtx, `Swap response`);
    }
    catch (e) {
        const error = e;
        const errorCtx = {
            ...reqCtx,
            error,
            duration: Date.now() - startedAt,
        };
        logger.error(errorCtx, `Swap request was failed`);
        const errorMessage = `${this.connectorName}::request failed: ${e}`;
        throw new swap_connector_error_1.SwapConnectorError(this.connectorName, swap_connector_error_type_1.SwapConnectorErrorType.InternalError, errorMessage);
    }
    return response;
};
//# sourceMappingURL=swap.connector.js.map