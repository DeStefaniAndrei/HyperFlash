"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LogLevel = void 0;
/* eslint-disable no-console */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["LOG"] = 0] = "LOG";
    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
    LogLevel[LogLevel["ERROR"] = 2] = "ERROR";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
function defaultLogger(level, args) {
    switch (level) {
        case LogLevel.LOG: {
            if (["1", "2"].includes(process?.env?.DEBUG || "")) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                console.log(...args);
            }
            break;
        }
        case LogLevel.VERBOSE: {
            if (process?.env?.DEBUG === "2") {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                console.log(...args);
            }
            break;
        }
        case LogLevel.ERROR:
        default: {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            console.error(...args);
            break;
        }
    }
}
class Logger {
    constructor(logger = defaultLogger) {
        this.logger = logger;
    }
    verbose(...params) {
        this.logger(LogLevel.VERBOSE, params);
    }
    log(...params) {
        this.logger(LogLevel.LOG, params);
    }
    error(...params) {
        this.logger(LogLevel.ERROR, params);
    }
}
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map