"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PartialOrder = exports.Order = void 0;
const tslib_1 = require("tslib");
const buffer_1 = require("buffer");
const js_sha3_1 = require("js-sha3");
const bl = tslib_1.__importStar(require("@solana/buffer-layout"));
const blu = tslib_1.__importStar(require("@solana/buffer-layout-utils"));
const solana_utils_1 = require("@debridge-finance/solana-utils");
const client_error_error_1 = require("./errors/client-error.error");
const client_error_type_enum_1 = require("./errors/client-error-type.enum");
class Optional extends bl.Layout {
    constructor(layout, property) {
        super(-1, property);
        this.layout = layout;
        this.discriminator = bl.u8();
    }
    encode(src, b, offset = 0) {
        if (src === null || src === undefined) {
            return this.discriminator.encode(0, b, offset);
        }
        this.discriminator.encode(1, b, offset);
        return this.layout.encode(src, b, offset + 1) + 1;
    }
    decode(b, offset = 0) {
        const discriminator = this.discriminator.decode(b, offset);
        if (discriminator === 0) {
            return null;
        }
        else if (discriminator === 1) {
            return this.layout.decode(b, offset + 1);
        }
        throw new Error(`Invalid option: ${this.property || "not set"}`);
    }
    getSpan(b, offset = 0) {
        const discriminator = this.discriminator.decode(b, offset);
        if (discriminator === 0) {
            return 1;
        }
        else if (discriminator === 1) {
            return this.layout.getSpan(b, offset + 1) + 1;
        }
        throw new Error(`Invalid option: ${this.property || "not set"}`);
    }
}
class U8Vec extends bl.Layout {
    constructor(property) {
        super(-1, property);
        const size = bl.u8("size");
        const elements = bl.seq(bl.u8(), bl.offset(size, -1), "elements");
        this.layout = bl.struct([size, elements], property);
    }
    encode(src, b, offset = 0) {
        if (src === null || src === undefined || src.length === 0) {
            return bl.u8().encode(0, b, offset);
        }
        return this.layout.encode({ size: src.length, elements: Array.from(src) }, b, offset);
    }
    decode(b, offset = 0) {
        const decoded = this.layout.decode(b, offset);
        if (decoded.size === 0)
            return buffer_1.Buffer.from([]);
        return buffer_1.Buffer.from(decoded.elements);
    }
    getSpan(b, offset = 0) {
        if (!b)
            return 0;
        return b[offset] + 1;
    }
}
class Order {
    static initLayout() {
        const extCall = new Optional(bl.struct([bl.blob(32, "externalCallHash")]), "extCall");
        return bl.struct([
            blu.u64be("nonce"),
            new U8Vec("makerSrcAddress"),
            blu.u256be("giveChainId"),
            new U8Vec("giveTokenAddress"),
            blu.u256be("giveAmount"),
            blu.u256be("takeChainId"),
            new U8Vec("takeTokenAddress"),
            blu.u256be("takeAmount"),
            new U8Vec("receiverDstAddress"),
            new U8Vec("givePatchAuthorityAddress"),
            new U8Vec("orderAuthorityDstAddress"),
            new U8Vec("allowedTakerDstAddress"),
            new U8Vec("allowedCancelBeneficiaryAddress"),
            extCall,
        ]);
    }
    static orderDataToOrderLayout(data) {
        let extCall = null;
        if (data.externalCall) {
            extCall = {
                externalCallHash: data.externalCall.externalCallHash ??
                    solana_utils_1.helpers.hexToBuffer(`0x${(0, js_sha3_1.keccak256)(data.externalCall?.externalCallData)}`),
            };
        }
        return {
            nonce: data.nonce,
            giveAmount: data.give.amount,
            giveChainId: BigInt(data.give.chainId),
            giveTokenAddress: data.give.tokenAddress,
            takeAmount: data.take.amount,
            takeChainId: BigInt(data.take.chainId),
            takeTokenAddress: data.take.tokenAddress,
            makerSrcAddress: data.maker,
            receiverDstAddress: data.receiver,
            givePatchAuthorityAddress: data.givePatchAuthority,
            orderAuthorityDstAddress: data.orderAuthorityDstAddress,
            allowedTakerDstAddress: data.allowedTaker || null,
            allowedCancelBeneficiaryAddress: data.allowedCancelBeneficiary || null,
            extCall,
        };
    }
    static serialize(data) {
        const orderLayout = Order.orderDataToOrderLayout(data);
        const buffer = buffer_1.Buffer.alloc(1000);
        const layout = Order.initLayout();
        const encoded = layout.encode(orderLayout, buffer, 0);
        return buffer_1.Buffer.from(buffer.subarray(0, encoded));
    }
    static deserialize(data, omitCalldata = true) {
        const layout = Order.initLayout();
        const decoded = layout.decode(data);
        return {
            nonce: decoded.nonce,
            give: {
                amount: decoded.giveAmount,
                chainId: Number(decoded.giveChainId),
                tokenAddress: decoded.giveTokenAddress,
            },
            take: {
                amount: decoded.takeAmount,
                chainId: Number(decoded.takeChainId),
                tokenAddress: decoded.takeTokenAddress,
            },
            givePatchAuthority: decoded.givePatchAuthorityAddress,
            maker: decoded.makerSrcAddress,
            orderAuthorityDstAddress: decoded.orderAuthorityDstAddress,
            receiver: decoded.receiverDstAddress,
            allowedCancelBeneficiary: decoded.allowedCancelBeneficiaryAddress || undefined,
            allowedTaker: decoded.allowedTakerDstAddress || undefined,
            externalCall: decoded.extCall
                ? {
                    externalCallHash: Uint8Array.from(decoded.extCall.externalCallHash),
                    externalCallData: Uint8Array.from(decoded.extCall.externalCallHash),
                }
                : undefined,
        };
    }
    static getExternalCallHash(data) {
        if (data.externalCallHash)
            return data.externalCallHash;
        return solana_utils_1.helpers.hexToBuffer(`0x${(0, js_sha3_1.keccak256)(data.externalCallData)}`);
    }
    static calculateId(order) {
        const serialized = Order.serialize(order);
        // logger.debug(serialized.toString("hex"));
        return `0x${(0, js_sha3_1.keccak256)(serialized)}`;
    }
    static verify(order) {
        return Order.calculateId(order) === solana_utils_1.helpers.bufferToHex(order.orderId);
    }
    static buildOrderDataWithId(order) {
        const orderId = this.calculateId(order);
        return {
            ...order,
            orderId: solana_utils_1.helpers.hexToBuffer(orderId),
        };
    }
    /**
     * Verifies order if order id is present else builds OrderDataWithId.
     * If order id is present but verification fails throws `ClientErrorType.WrongOrderId`
     * @param order order data with or without orderId
     * @returns
     */
    static getVerified(order) {
        if ("orderId" in order) {
            if (this.verify(order)) {
                return order;
            }
            throw new client_error_error_1.ClientError(client_error_type_enum_1.ClientErrorType.WrongOrderId);
        }
        else {
            return this.buildOrderDataWithId(order);
        }
    }
}
exports.Order = Order;
class PartialOrder {
}
exports.PartialOrder = PartialOrder;
PartialOrder.decimals = 1e6;
//# sourceMappingURL=order.js.map