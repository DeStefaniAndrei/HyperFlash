"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpStackBasedEVMChains = exports.getEngineByChainId = exports.IaaSOriginChainId = exports.IaaSChainId = exports.ChainId = exports.ChainEngine = exports.OrderEstimationStage = exports.BPS_DENOMINATOR = exports.ZERO_SOLANA_ADDRESS = exports.ZERO_EVM_ADDRESS = void 0;
const client_error_error_1 = require("./errors/client-error.error");
const client_error_type_enum_1 = require("./errors/client-error-type.enum");
/**
 * @internal
 */
exports.ZERO_EVM_ADDRESS = "0x0000000000000000000000000000000000000000";
/**
 * @internal
 */
exports.ZERO_SOLANA_ADDRESS = "0x0000000000000000000000000000000000000000000000000000000000000000";
/**
 * @internal
 */
exports.BPS_DENOMINATOR = BigInt(10000);
/**
 * Indicates a stage of order estimation.
 * This is crucial for EVMs: during the order creation the gas price must be
 * set pessimistically (with large multiplier) while during the order fulfillment
 * we may pick the current gas price
 */
var OrderEstimationStage;
(function (OrderEstimationStage) {
    OrderEstimationStage[OrderEstimationStage["OrderCreation"] = 0] = "OrderCreation";
    OrderEstimationStage[OrderEstimationStage["OrderFulfillment"] = 1] = "OrderFulfillment";
})(OrderEstimationStage || (exports.OrderEstimationStage = OrderEstimationStage = {}));
var ChainEngine;
(function (ChainEngine) {
    ChainEngine[ChainEngine["EVM"] = 0] = "EVM";
    ChainEngine[ChainEngine["Solana"] = 1] = "Solana";
})(ChainEngine || (exports.ChainEngine = ChainEngine = {}));
var ChainId;
(function (ChainId) {
    ChainId[ChainId["Ethereum"] = 1] = "Ethereum";
    ChainId[ChainId["BSC"] = 56] = "BSC";
    ChainId[ChainId["Heco"] = 128] = "Heco";
    ChainId[ChainId["Polygon"] = 137] = "Polygon";
    ChainId[ChainId["Arbitrum"] = 42161] = "Arbitrum";
    ChainId[ChainId["Avalanche"] = 43114] = "Avalanche";
    ChainId[ChainId["AvalancheTest"] = 43113] = "AvalancheTest";
    ChainId[ChainId["Kovan"] = 42] = "Kovan";
    ChainId[ChainId["BSCTest"] = 97] = "BSCTest";
    ChainId[ChainId["HecoTest"] = 256] = "HecoTest";
    ChainId[ChainId["PolygonTest"] = 80001] = "PolygonTest";
    ChainId[ChainId["ArbitrumTest"] = 421611] = "ArbitrumTest";
    ChainId[ChainId["Solana"] = 7565164] = "Solana";
    ChainId[ChainId["Fantom"] = 250] = "Fantom";
    ChainId[ChainId["Linea"] = 59144] = "Linea";
    ChainId[ChainId["Base"] = 8453] = "Base";
    ChainId[ChainId["Optimism"] = 10] = "Optimism";
    ChainId[ChainId["Neon"] = 100000001] = "Neon";
    ChainId[ChainId["Gnosis"] = 100000002] = "Gnosis";
    ChainId[ChainId["LightLink"] = 100000003] = "LightLink";
    ChainId[ChainId["Metis"] = 100000004] = "Metis";
    ChainId[ChainId["Bitrock"] = 100000005] = "Bitrock";
})(ChainId || (exports.ChainId = ChainId = {}));
var IaaSChainId;
(function (IaaSChainId) {
    IaaSChainId[IaaSChainId["Neon"] = 100000001] = "Neon";
    IaaSChainId[IaaSChainId["Gnosis"] = 100000002] = "Gnosis";
    IaaSChainId[IaaSChainId["LightLink"] = 100000003] = "LightLink";
    IaaSChainId[IaaSChainId["Metis"] = 100000004] = "Metis";
    IaaSChainId[IaaSChainId["Bitrock"] = 100000005] = "Bitrock";
})(IaaSChainId || (exports.IaaSChainId = IaaSChainId = {}));
exports.IaaSOriginChainId = {
    [IaaSChainId.Neon]: 245022934,
    [IaaSChainId.Gnosis]: 100,
    [IaaSChainId.LightLink]: 1890,
    [IaaSChainId.Metis]: 1088,
    [IaaSChainId.Bitrock]: 7171,
};
function getEngineByChainId(chainId) {
    switch (chainId) {
        case ChainId.Solana:
            return ChainEngine.Solana;
        case ChainId.Ethereum:
        case ChainId.BSC:
        case ChainId.Heco:
        case ChainId.Polygon:
        case ChainId.Arbitrum:
        case ChainId.Avalanche:
        case ChainId.AvalancheTest:
        case ChainId.Kovan:
        case ChainId.BSCTest:
        case ChainId.HecoTest:
        case ChainId.PolygonTest:
        case ChainId.ArbitrumTest:
        case ChainId.Fantom:
        case ChainId.Optimism:
        case ChainId.Base:
        case ChainId.Linea:
        case ChainId.Neon:
        case ChainId.Gnosis:
        case ChainId.LightLink:
        case ChainId.Metis:
        case ChainId.Bitrock:
            return ChainEngine.EVM;
        default:
            throw new client_error_error_1.ClientError(client_error_type_enum_1.ClientErrorType.UnkownEngine, 
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            `Unknown engine for chain: ${ChainId[chainId]} (id: ${chainId})`);
    }
}
exports.getEngineByChainId = getEngineByChainId;
exports.OpStackBasedEVMChains = [ChainId.Base, ChainId.Optimism];
//# sourceMappingURL=common.types.js.map