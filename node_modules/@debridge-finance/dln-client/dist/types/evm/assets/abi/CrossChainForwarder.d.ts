export declare const CrosschainForwarderABI: readonly [{
    readonly inputs: readonly [];
    readonly name: "AdminBadRole";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "recipient";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "token";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "AffiliateFeeDistributionFailed";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "target";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "token";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "expectedBalance";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "actualBalance";
        readonly type: "uint256";
    }];
    readonly name: "CallCausedBalanceDiscrepancy";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "target";
        readonly type: "address";
    }, {
        readonly internalType: "bytes";
        readonly name: "data";
        readonly type: "bytes";
    }];
    readonly name: "CallFailed";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "EthTransferFailed";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "NotEnoughSrcFundsIn";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NotSupportedRouter";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "SignatureInvalidV";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "srcTokenOut";
        readonly type: "address";
    }];
    readonly name: "SwapEmptyResult";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "srcRouter";
        readonly type: "address";
    }];
    readonly name: "SwapFailed";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "WrongArgumentLength";
    readonly type: "error";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint8";
        readonly name: "version";
        readonly type: "uint8";
    }];
    readonly name: "Initialized";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "token";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "recipient";
        readonly type: "address";
    }];
    readonly name: "Refund";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "role";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "previousAdminRole";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "newAdminRole";
        readonly type: "bytes32";
    }];
    readonly name: "RoleAdminChanged";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "role";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "sender";
        readonly type: "address";
    }];
    readonly name: "RoleGranted";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "role";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "sender";
        readonly type: "address";
    }];
    readonly name: "RoleRevoked";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "srcSwapRouter";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "bool";
        readonly name: "isSupported";
        readonly type: "bool";
    }];
    readonly name: "SupportedRouter";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "router";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "tokenIn";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amountIn";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "tokenOut";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly name: "SwapExecuted";
    readonly type: "event";
}, {
    readonly inputs: readonly [];
    readonly name: "DEFAULT_ADMIN_ROLE";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "NATIVE_TOKEN";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "deBridgeGate";
    readonly outputs: readonly [{
        readonly internalType: "contract IDeBridgeGateExtended";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "role";
        readonly type: "bytes32";
    }];
    readonly name: "getRoleAdmin";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "role";
        readonly type: "bytes32";
    }, {
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }];
    readonly name: "grantRole";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "role";
        readonly type: "bytes32";
    }, {
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }];
    readonly name: "hasRole";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IDeBridgeGateExtended";
        readonly name: "_deBridgeGate";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "role";
        readonly type: "bytes32";
    }, {
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }];
    readonly name: "renounceRole";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "token";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "recipient";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "rescueFunds";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "role";
        readonly type: "bytes32";
    }, {
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }];
    readonly name: "revokeRole";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_srcTokenIn";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_srcAmountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes";
        readonly name: "_srcTokenInPermitEnvelope";
        readonly type: "bytes";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "chainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "useAssetFee";
            readonly type: "bool";
        }, {
            readonly internalType: "uint32";
            readonly name: "referralCode";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "autoParams";
            readonly type: "bytes";
        }];
        readonly internalType: "struct ICrossChainForwarder.GateParams";
        readonly name: "_gateParams";
        readonly type: "tuple";
    }];
    readonly name: "sendV2";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_srcTokenIn";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_srcAmountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes";
        readonly name: "_srcTokenInPermitEnvelope";
        readonly type: "bytes";
    }, {
        readonly internalType: "uint256";
        readonly name: "_affiliateFeeAmount";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_affiliateFeeRecipient";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "chainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "useAssetFee";
            readonly type: "bool";
        }, {
            readonly internalType: "uint32";
            readonly name: "referralCode";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "autoParams";
            readonly type: "bytes";
        }];
        readonly internalType: "struct ICrossChainForwarder.GateParams";
        readonly name: "_gateParams";
        readonly type: "tuple";
    }];
    readonly name: "sendV3";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_srcTokenIn";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_srcAmountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes";
        readonly name: "_srcTokenInPermitEnvelope";
        readonly type: "bytes";
    }, {
        readonly internalType: "address";
        readonly name: "_srcSwapRouter";
        readonly type: "address";
    }, {
        readonly internalType: "bytes";
        readonly name: "_srcSwapCalldata";
        readonly type: "bytes";
    }, {
        readonly internalType: "address";
        readonly name: "_srcTokenOut";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_srcTokenExpectedAmountOut";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_srcTokenRefundRecipient";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_target";
        readonly type: "address";
    }, {
        readonly internalType: "bytes";
        readonly name: "_targetData";
        readonly type: "bytes";
    }];
    readonly name: "strictlySwapAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_srcTokenIn";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_srcAmountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes";
        readonly name: "_srcTokenInPermitEnvelope";
        readonly type: "bytes";
    }, {
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "swapRouter";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "swapCalldata";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "tokenOut";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenOutExpectedAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "tokenOutRefundRecipient";
            readonly type: "address";
        }];
        readonly internalType: "struct CrosschainForwarder.SwapDetails";
        readonly name: "_swapDetails";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "_target";
        readonly type: "address";
    }, {
        readonly internalType: "bytes";
        readonly name: "_targetData";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_orderId";
        readonly type: "bytes32";
    }];
    readonly name: "strictlySwapAndCallDln";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly name: "supportedRouters";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes4";
        readonly name: "interfaceId";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_srcTokenIn";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_srcAmountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes";
        readonly name: "_srcTokenInPermitEnvelope";
        readonly type: "bytes";
    }, {
        readonly internalType: "address";
        readonly name: "_srcSwapRouter";
        readonly type: "address";
    }, {
        readonly internalType: "bytes";
        readonly name: "_srcSwapCalldata";
        readonly type: "bytes";
    }, {
        readonly internalType: "address";
        readonly name: "_srcTokenOut";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "chainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "useAssetFee";
            readonly type: "bool";
        }, {
            readonly internalType: "uint32";
            readonly name: "referralCode";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "autoParams";
            readonly type: "bytes";
        }];
        readonly internalType: "struct ICrossChainForwarder.GateParams";
        readonly name: "_gateParams";
        readonly type: "tuple";
    }];
    readonly name: "swapAndSendV2";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_srcTokenIn";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_srcAmountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes";
        readonly name: "_srcTokenInPermitEnvelope";
        readonly type: "bytes";
    }, {
        readonly internalType: "uint256";
        readonly name: "_affiliateFeeAmount";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_affiliateFeeRecipient";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_srcSwapRouter";
        readonly type: "address";
    }, {
        readonly internalType: "bytes";
        readonly name: "_srcSwapCalldata";
        readonly type: "bytes";
    }, {
        readonly internalType: "address";
        readonly name: "_srcTokenOut";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "chainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "useAssetFee";
            readonly type: "bool";
        }, {
            readonly internalType: "uint32";
            readonly name: "referralCode";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "autoParams";
            readonly type: "bytes";
        }];
        readonly internalType: "struct ICrossChainForwarder.GateParams";
        readonly name: "_gateParams";
        readonly type: "tuple";
    }];
    readonly name: "swapAndSendV3";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_srcSwapRouter";
        readonly type: "address";
    }, {
        readonly internalType: "bool";
        readonly name: "_isSupported";
        readonly type: "bool";
    }];
    readonly name: "updateSupportedRouter";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "version";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly stateMutability: "payable";
    readonly type: "receive";
}];
//# sourceMappingURL=CrossChainForwarder.d.ts.map