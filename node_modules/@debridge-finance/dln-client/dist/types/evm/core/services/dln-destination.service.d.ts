import Web3 from "web3";
import { Order } from "../models/order.model";
import { BigNumberish, BytesLike, Contract, Method } from "../types/common.type";
import { ContractCache } from "../utils/contract-cache.class";
import { TakeOrders } from "../models/take-orders.model";
import { Address, ChainId, OrderEstimationStage, TransactionCostInNative } from "../../../common.types";
import { Logger } from "../../../common/logger";
import { OrderData } from "../../../order";
import { Env } from "../../../common/env";
export type FulfillNativeCostCalculationDetailsType = {
    orderEstimationStage: OrderEstimationStage;
    /**
     * Taker have to estimate actual fulfill transaction
     */
    fulfillGasLimit: bigint;
    fulfillCappedGasPrice?: bigint;
};
export declare class DlnDestinationService extends ContractCache {
    private readonly version;
    constructor(enableContractsCache?: boolean, version?: Env);
    private bytesLikeToString;
    /**
     * Method for calculation cost in native of fullfill
     * @param takeChain take chain
     * @param inToken input token for preswap
     * @param outToken take token
     * @param takeProvider web3
     * @param orderEstimationStage estimation type
     * @param calculationDetails details for calculation
     * @param cappedGasPrice gas price
     * @param payload chain-specific payload
     */
    getRawFulfillNativeCost(chain: ChainId, provider: Web3, orderEstimationStage: OrderEstimationStage, gasLimit: bigint, cappedGasPrice: bigint | undefined, hasSwap: boolean, payload: {
        loggerInstance: Logger;
    }): Promise<TransactionCostInNative>;
    getSendCancelCost(giveChainId: ChainId, takeChainId: ChainId, provider: Web3, orderEstimationStage: OrderEstimationStage, payload?: {
        loggerInstance?: Logger;
    }): Promise<TransactionCostInNative>;
    getSendUnlockNativeCost(giveChainId: ChainId, takeChainId: ChainId, provider: Web3, orderEstimationStage: OrderEstimationStage, payload?: {
        loggerInstance?: Logger;
    }): Promise<TransactionCostInNative>;
    getSendBatchUnlockNativeCost(batchSize: number, giveChainId: ChainId, takeChainId: ChainId, provider: Web3, orderEstimationStage: OrderEstimationStage, payload?: {
        loggerInstance?: Logger;
    }): Promise<TransactionCostInNative>;
    getSendBatchUnlockNativeCostForSingleOrder(batchUnlockCoverage: number, giveChainId: ChainId, takeChainId: ChainId, provider: Web3, orderEstimationStage: OrderEstimationStage, payload?: {
        loggerInstance?: Logger;
    }): Promise<TransactionCostInNative>;
    getFulfillOrderMethod(provider: Web3, contractAddress: string, order: OrderData, fulFillAmount: BigNumberish, orderId: BytesLike, permit: BytesLike, unlockAuthority: BytesLike, externalCallRewardBeneficiary?: BytesLike): Method;
    getPatchOrderTakeMethod(provider: Web3, contractAddress: string, order: Order, subtrahend: BigNumberish): any;
    takePatches(provider: Web3, contractAddress: string, orderId: BytesLike): Promise<bigint>;
    sendBatchEvmUnlock(provider: Web3, contractAddress: string, orderIds: BytesLike[], beneficiary: string, executionFee: BigNumberish): Method;
    sendBatchSolanaUnlock(provider: Web3, contractAddress: string, orders: OrderData[], beneficiary: Address, claimFee: bigint, initWalletFee: bigint, claimUnlockFee: bigint): any;
    getSendEvmUnlockMethod(provider: Web3, contractAddress: string, orderId: BytesLike, beneficiary: string, executionFee: BigNumberish): Method;
    getSendEvmOrderCancelMethod(provider: Web3, contractAddress: string, order: Order, cancelBeneficiary: string, executionFee: BigNumberish): Method;
    getSendSolanaUnlockMethod(provider: Web3, contractAddress: string, order: Order, beneficiary: string, executionFee: BigNumberish, reward1: string | number, reward2: string | number): Method;
    getSendSolanaOrderCancelMethod(provider: Web3, contractAddress: string, order: Order, cancelBeneficiary: string, executionFee: BigNumberish, reward1: string | number, reward2: string | number): Method;
    takeOrders(provider: Web3, contractAddress: string, orderId: BytesLike): Promise<TakeOrders>;
    protected createContract(provider: Web3, contractAddress: string): Contract;
}
//# sourceMappingURL=dln-destination.service.d.ts.map