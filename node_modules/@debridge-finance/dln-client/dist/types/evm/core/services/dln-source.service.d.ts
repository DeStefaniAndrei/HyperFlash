import Web3 from "web3";
import { OrderCreation } from "../models/order-creation.model";
import { BigNumberish, BytesLike, Method, Contract } from "../types/common.type";
import { ContractCache } from "../utils/contract-cache.class";
import { GiveOrder } from "../models/give-orders.model";
import { ChainId, OrderEstimationStage, TransactionCostInNative } from "../../../common.types";
import { Logger } from "../../../common/logger";
import { Order } from "../models/order.model";
import { Env } from "../../../common/env";
export declare class DlnSourceService extends ContractCache {
    private readonly version;
    constructor(enableContractsCache?: boolean, version?: Env);
    getCreateOrderMethod(provider: Web3, contractAddress: string, orderCreation: OrderCreation, affiliateFee: BytesLike, referralCode: BigNumberish, permit: BytesLike): Method;
    getCreateSaltedOrderMethod(provider: Web3, contractAddress: string, orderCreation: OrderCreation, salt: bigint, affiliateFee: BytesLike, referralCode: BigNumberish, permit: BytesLike, metadata: BytesLike): Method;
    getPatchOrderGiveMethod(provider: Web3, contractAddress: string, order: Order, amount: BigNumberish, permit: BytesLike): Method;
    getClaimBatchUnlockNativeCostForSingleOrder(batchUnlockCoverage: number, chain: ChainId, provider: Web3, orderEstimationStage: OrderEstimationStage, payload?: {
        loggerInstance?: Logger;
    }): Promise<TransactionCostInNative>;
    getClaimBatchUnlockExecutionFee(batchSize: number, chain: ChainId, provider: Web3, orderEstimationStage: OrderEstimationStage, payload?: {
        loggerInstance?: Logger;
    }): Promise<TransactionCostInNative>;
    getClaimUnlockExecutionFee(chain: ChainId, provider: Web3, orderEstimationStage: OrderEstimationStage, payload?: {
        loggerInstance?: Logger;
    }): Promise<TransactionCostInNative>;
    getClaimCancelExecutionFee(chain: ChainId, provider: Web3, orderEstimationStage: OrderEstimationStage, payload?: {
        loggerInstance?: Logger;
    }): Promise<TransactionCostInNative>;
    getGlobalFixedNativeFee(provider: Web3, contractAddress: string): Promise<string>;
    getGlobalTransferFeeBps(provider: Web3, contractAddress: string): Promise<string>;
    giveOrder(provider: Web3, contractAddress: string, orderId: BytesLike): Promise<GiveOrder>;
    givePatches(provider: Web3, contractAddress: string, orderId: BytesLike): Promise<bigint>;
    protected createContract(provider: Web3, contractAddress: string): Contract;
}
//# sourceMappingURL=dln-source.service.d.ts.map