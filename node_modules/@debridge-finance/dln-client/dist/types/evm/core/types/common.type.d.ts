/// <reference types="node" />
import Web3 from "web3";
import { Address } from "../../../common.types";
export type EvmCalldataEnvelope = {
    version: number;
    data: EvmCalldata;
};
export type EvmCalldata = {
    fallbackAddress: Address;
    executorAddress: Address;
    executionFee: bigint;
    allowDelayedExecution: boolean;
    requireSuccessfullExecution: boolean;
    payload: Buffer;
};
export type Bytes = ArrayLike<number>;
export type BytesLike = Bytes | string;
export type BigNumberish = Bytes | string | number;
export type Contract = InstanceType<Web3["eth"]["Contract"]>;
export type Method = {
    encodeABI: () => string;
};
/**
 * @internal
 */
export type EVMOrder = {
    allowedCancelBeneficiarySrc: string;
    allowedTakerDst: string;
    externalCall: string;
    giveAmount: string;
    giveChainId: string;
    givePatchAuthoritySrc: string;
    giveTokenAddress: string;
    makerOrderNonce: number;
    makerSrc: string;
    orderAuthorityAddressDst: string;
    receiverDst: string;
    takeAmount: string;
    takeChainId: string;
    takeTokenAddress: string;
};
export type EvmInstruction = {
    data: string;
    to: string;
    value: number | string;
    from?: string;
};
export declare enum SupportedEVMChains {
    Arbitrum = 42161,
    Avalanche = 43114,
    Base = 8453,
    Bitrock = 100000005,
    BSC = 56,
    Ethereum = 1,
    Fantom = 250,
    Gnosis = 100000002,
    LightLink = 100000003,
    Linea = 59144,
    Metis = 100000004,
    Neon = 100000001,
    Optimism = 10,
    Polygon = 137
}
export type SupportedEvmChainsGasLimits = {
    [key in SupportedEVMChains]: number;
};
//# sourceMappingURL=common.type.d.ts.map