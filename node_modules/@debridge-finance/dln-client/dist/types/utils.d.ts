import { Buffer } from "buffer";
import BigNumber from "bignumber.js";
import { Address, ChainId } from "./common.types";
import { Logger } from "./common/logger";
export declare const ATASize = 165;
export declare const TransactionFee = 5000;
/**
 * Lambda for quick convertation of Address into string. At the moment supports only evm and solana.
 * It's better to call `clientImplementation.fromAddress(chain, token).toString()`
 * @returns stringified address
 */
export declare const tokenAddressToString: (chain: ChainId, address: Address) => string;
/**
 * Lambda for quick convertation of Address into string. At the moment supports only evm and solana.
 * It's better to call `clientImplementation.parseAddress(chain, token)`
 * @returns parsed address
 */
export declare const tokenStringToBuffer: (chain: ChainId, address: string) => Uint8Array;
/**
 * Helper for buffers comparison
 */
export declare const buffersAreEqual: (a: Buffer | Uint8Array, b: Buffer | Uint8Array) => boolean;
/**
 * Lambda for to get native token for specific chain. Could be used when clientImplementation is unavailable.
 * Better way to retrieve native token address is to read `clientImplementation.nativeAddress` field
 */
export declare const getNativeToken: (chainId: ChainId) => Uint8Array;
/**
 * @internal
 * @deprecated, use {@link calcBigIntAmountViaCrossRate}
 * Converts the amount of inToken to outToken using the given exchange rates
 */
export declare const calcAmountViaCrossRate: (inAmount: BigNumber, inTokenExchangeRate: BigNumber, inTokenDecimals: number, outTokenExchangeRate: BigNumber, outTokenDecimals: number, payload?: {
    loggerInstance?: Logger;
}) => BigNumber;
/**
 * @internal
 */
export declare function fixDecimals(amount: bigint, decimalsIn: number, decimalsOut: number): bigint;
export declare function formatAmount(amount: bigint, decimals: number): string;
/**
 * @internal
 */
export declare const calcBigIntAmountViaCrossRate: (inAmount: bigint, inTokenExchangeRate: number, inTokenDecimals: number, outTokenExchangeRate: number, outTokenDecimals: number) => bigint;
//# sourceMappingURL=utils.d.ts.map