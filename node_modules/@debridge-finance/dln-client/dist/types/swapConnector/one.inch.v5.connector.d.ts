import { Logger } from "../common/logger";
import { ChainId } from "../common.types";
import { SwapConnector, SwapConnectorQuoteRequest, SwapConnectorQuoteResult, SwapConnectorRequest, SwapConnectorResult } from "./swap.connector";
/**
 * @internal
 */
export interface IQuoteResponse extends IOneInchResponse {
    fromToken: {
        address: string;
        decimals: number;
        symbol: string;
        name: string;
        logoURI: string;
    };
    toToken: {
        address: string;
        decimals: number;
        symbol: string;
        name: string;
        logoURI: string;
    };
    toAmount: string;
    protocols: {
        name: string;
        part: number;
        fromTokenAddress: string;
        toTokenAddress: string;
    }[];
    estimatedGas: number;
}
/**
 * @internal
 */
export interface IOneInchSwapResponse extends IOneInchResponse {
    fromToken: {
        address: string;
        decimals: number;
        symbol: string;
        name: string;
        logoURI: string;
    };
    toToken: {
        address: string;
        decimals: number;
        symbol: string;
        name: string;
        logoURI: string;
    };
    toAmount: string;
    protocols: {
        name: string;
        part: number;
        fromTokenAddress: string;
        toTokenAddress: string;
    }[];
    tx: {
        from: string;
        to: string;
        data: string;
        value: string;
        gas: number;
        gasPrice: string;
    };
}
/**
 * @internal
 */
export interface IOneInchLiquiditySourcesResponse extends IOneInchResponse {
    protocols: Array<{
        id: string;
        title: string;
    }>;
}
interface IOneInchResponse {
    status: number;
}
type IsPMMAllowedFunction = (swapRequest: SwapConnectorQuoteRequest | SwapConnectorRequest) => Promise<boolean>;
interface Config {
    customApiURL?: string;
    disablePMMProtocols?: boolean;
    disabledProtocols?: string[];
    token?: string;
    timeoutInMs?: number;
    isPMMAllowedFunction?: IsPMMAllowedFunction;
}
/**
 * @internal
 */
export declare class OneInchV5Connector extends SwapConnector {
    #private;
    protected readonly SUPPORTED_CHAINS: ChainId[];
    constructor(config: Config);
    getSupportedChains(): ChainId[];
    getLPs(chainId: ChainId, context: {
        logger: Logger;
    }): Promise<IOneInchLiquiditySourcesResponse>;
    getEstimate(request: SwapConnectorQuoteRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorQuoteResult>;
    getSwap(request: SwapConnectorRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorResult>;
    setDisabledProtocols(disabledProtocols: string[]): void;
    get connectorName(): string;
}
export {};
//# sourceMappingURL=one.inch.v5.connector.d.ts.map