import { ChainId, GetDecimalsLambda, GetGasPriceLambda, IaaSChainId } from "../common.types";
import { Logger } from "../common/logger";
import { SwapConnector, SwapConnectorQuoteRequest, SwapConnectorQuoteResult, SwapConnectorRequest, SwapConnectorResult } from "./swap.connector";
declare enum OpenOceanSupportedChainId {
    Ethereum = 1,
    BSC = 56,
    Arbitrum = 42161,
    Avalanche = 43114,
    Optimism = 10,
    Polygon = 137,
    Base = 8453,
    Linea = 59144,
    Gnosis = 100000002,
    Metis = 100000004
}
export declare const openOceanNativeTokens: {
    [key in OpenOceanSupportedChainId]: string;
};
export declare const openOceanIaaSChainMapper: {
    [key in IaaSChainId]?: number;
};
type Config = {
    apiKey: string;
    disabledDexIds?: number[];
    enabledDexIds?: number[];
    timeoutInMs?: number;
    getDecimalsLambda: GetDecimalsLambda;
    getGasPriceLambda: GetGasPriceLambda;
    referrer?: string;
};
export declare class OpenOceanSwapConnector extends SwapConnector {
    #private;
    constructor(config: Config);
    getSupportedChains(): ChainId[];
    getEstimate(request: SwapConnectorQuoteRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorQuoteResult>;
    getSwap(request: SwapConnectorRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorResult>;
    get connectorName(): string;
}
export {};
//# sourceMappingURL=openocean.connector.d.ts.map