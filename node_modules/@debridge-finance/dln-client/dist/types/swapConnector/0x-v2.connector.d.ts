import { ChainId } from "../common.types";
import { Logger } from "../common/logger";
import { SwapConnector, SwapConnectorQuoteRequest, SwapConnectorQuoteResult, SwapConnectorRequest, SwapConnectorResult } from "./swap.connector";
type Config = {
    apiKey: string;
    excludeSources?: string[];
    tradeSurplusRecipient?: string;
    timeoutInMs?: number;
};
export declare class ZeroXV2SwapConnector extends SwapConnector {
    #private;
    constructor(config: Config);
    getSupportedChains(): ChainId[];
    getEstimate(request: SwapConnectorQuoteRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorQuoteResult>;
    getSwap(request: SwapConnectorRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorResult>;
    get connectorName(): string;
}
export {};
//# sourceMappingURL=0x-v2.connector.d.ts.map