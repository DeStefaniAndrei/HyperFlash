import Web3 from "web3";
import { Address, ChainId } from "../common.types";
import { Logger } from "../common/logger";
import { SwapConnector, SwapConnectorQuoteRequest, SwapConnectorQuoteResult, SwapConnectorRequest, SwapConnectorResult } from "./swap.connector";
type TokenPair = [Address, Address];
export declare class UniswapV2Connector extends SwapConnector {
    #private;
    private readonly connection;
    readonly chainId: ChainId;
    readonly tokens: TokenPair[];
    readonly routerAddress: Uint8Array;
    readonly wethAddress: Uint8Array;
    readonly ethPlaceholderAddress: Uint8Array;
    readonly quoteTTL: bigint;
    constructor(connection: Web3, chainId: ChainId, tokens: TokenPair[], routerAddress: Uint8Array, wethAddress: Uint8Array, ethPlaceholderAddress?: Uint8Array, quoteTTL?: bigint);
    private getPath;
    private normalizeTokens;
    private getTx;
    getSwap(request: SwapConnectorRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorResult>;
    getEstimate(request: SwapConnectorQuoteRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorQuoteResult>;
    getSupportedChains(): ChainId[];
    get connectorName(): string;
    private throwError;
}
export {};
//# sourceMappingURL=uniswapv2.connector.d.ts.map