import { ChainId, GetDecimalsLambda } from "../common.types";
import { Logger } from "../common/logger";
import { SwapConnector, SwapConnectorQuoteRequest, SwapConnectorQuoteResult, SwapConnectorRequest, SwapConnectorResult } from "./swap.connector";
interface DefaultFeeParameters {
    partnerAddress?: string;
    takeSurplus?: string;
    isSurplusToUser?: string;
    isDirectFeeTransfer?: string;
}
type Config = {
    basicUrl: string;
    getDecimalsLambda: GetDecimalsLambda;
    timeoutInMs?: number;
    excludeDEXS: string[];
    apiKey?: string;
    disableRFQ?: boolean;
    defaultFeeParameters: DefaultFeeParameters;
};
export declare class ParaswapConnector extends SwapConnector {
    #private;
    constructor(config: Config);
    getSwap(request: SwapConnectorRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorResult>;
    getEstimate(request: SwapConnectorQuoteRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorQuoteResult>;
    getSupportedChains(): ChainId[];
    get connectorName(): string;
}
export {};
//# sourceMappingURL=paraswap.connector.d.ts.map