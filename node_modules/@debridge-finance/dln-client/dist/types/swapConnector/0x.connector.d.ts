import { ChainId } from "../common.types";
import { Logger } from "../common/logger";
import { SwapConnector, SwapConnectorQuoteRequest, SwapConnectorQuoteResult, SwapConnectorRequest, SwapConnectorResult } from "./swap.connector";
type Source = "0x" | "Aave_V2" | "Balancer" | "Balancer_V2" | "BancorV3" | "Compound" | "CryptoCom" | "Curve" | "Curve_V2" | "DODO" | "DODO_V2" | "KyberDMM" | "KyberElastic" | "Lido" | "MakerPsm" | "Maverick_V1" | "MultiHop" | "ShibaSwap" | "SushiSwap" | "Synapse" | "Synthetix" | "Uniswap" | "Uniswap_V2" | "Uniswap_V3";
type CustomSources = {
    type: "excluded";
    excluded: Source[];
} | {
    type: "included";
    included: Source[];
};
export declare class ZeroXSwapConnector extends SwapConnector {
    #private;
    constructor(apiKey: string, customSources?: CustomSources, feeRecipientTradeSurplus?: string, timeoutInMs?: number);
    getSupportedChains(): ChainId[];
    getEstimate(request: SwapConnectorQuoteRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorQuoteResult>;
    getSwap(request: SwapConnectorRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorResult>;
    get connectorName(): string;
}
export {};
//# sourceMappingURL=0x.connector.d.ts.map