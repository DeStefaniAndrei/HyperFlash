import { Logger } from "../common/logger";
import { ChainId } from "../common.types";
import { SwapConnector, SwapConnectorQuoteRequest, SwapConnectorQuoteResult, SwapConnectorRequest, SwapConnectorResult } from "./swap.connector";
interface RouteSummary {
    tokenIn: string;
    tokenOut: string;
    amountIn: string;
    amountInUsd: string;
    amountOut: string;
    amountOutUsd: string;
    gas: string;
    gasprice: string;
    gasUsd: string;
    route: object[];
}
export interface KyberRouteResponse {
    data: {
        routerAddress: string;
        routeSummary: RouteSummary;
    };
}
export interface KeyberSwapResponse {
    data: {
        amountIn: string;
        amountInUsd: string;
        amountOut: string;
        amountOutUsd: string;
        gas: string;
        gasUsd: string;
        outputChange: {
            amount: string;
            percent: number;
            level: number;
        };
        data: string;
        routerAddress: string;
    };
}
export declare class KyberSwapConnector extends SwapConnector {
    #private;
    constructor(excludedSources?: string, timeoutInMs?: number);
    getSupportedChains(): ChainId[];
    getEstimate(request: SwapConnectorQuoteRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorQuoteResult>;
    getSwap(request: SwapConnectorRequest, context: {
        logger: Logger;
    }): Promise<SwapConnectorResult>;
    get connectorName(): string;
}
export {};
//# sourceMappingURL=kyber.connector.d.ts.map