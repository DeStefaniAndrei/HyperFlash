/// <reference types="node" />
/// <reference types="bn.js" />
import { Buffer } from "buffer";
import { BN, IdlTypes } from "@coral-xyz/anchor";
import { AccountInfo, AddressLookupTableAccount, Connection, PublicKey, Transaction, TransactionInstruction, VersionedMessage } from "@solana/web3.js";
import { OrderData } from "../order";
import { DlnDst } from "./idl/dst";
import { NonCompiledTransaction } from ".";
export declare function getAccountInfoCached(connection: Connection, acc: PublicKey): Promise<AccountInfo<Buffer> | null>;
export declare function getMinimumBalanceForRentExemption(connection: Connection, size: number): Promise<number>;
export declare function bigintToBN(n: bigint): BN;
export declare function bigintToArray(n: bigint | number, type: "u64" | "u256"): number[];
type IdlOrder = IdlTypes<DlnDst>["Order"];
export interface AnchorOrderData extends IdlOrder {
    makerSrc: Buffer;
    receiverDst: Buffer;
    givePatchAuthoritySrc: Buffer;
    orderAuthorityAddressDst: Buffer;
    allowedTakerDst: Buffer | null;
    allowedCancelBeneficiarySrc: Buffer | null;
}
export declare function orderDataToAnchorFormat(order: OrderData): AnchorOrderData;
export declare function solanaOrderToOrderData(order: AnchorOrderData): OrderData;
export declare function findALT(connection: Connection, pattern: Uint8Array): Promise<import("@solana/web3.js").GetProgramAccountsResponse>;
export declare function getSolanaDecimals(connection: Connection, tokenAddress: string): Promise<number>;
export declare function getTokenInfo(connection: Connection, tokenAddress: PublicKey): Promise<{
    name: string;
    symbol: string;
}>;
export declare function parseALT(message: VersionedMessage, alts: AddressLookupTableAccount[]): {
    writable: PublicKey[];
    readonly: PublicKey[];
};
export declare function prepareALT(slot: number, payer: PublicKey, addresses: PublicKey[]): [PublicKey, Transaction[]];
export declare function extendALT(lookupTableAddress: PublicKey, payer: PublicKey, addresses: PublicKey[]): TransactionInstruction;
/**
 *
 * @param alt
 * @param expectedAddresses
 * @returns false if ALT is broken
 */
export declare function verifyALT(alt: AddressLookupTableAccount | null, expectedAddresses: PublicKey[]): boolean;
export declare function createATA(tokenMint: PublicKey, owner: PublicKey, payer: PublicKey, associatedTokenProgram?: PublicKey): TransactionInstruction;
export declare function getALTs(connection: Connection, altKeys: PublicKey[]): Promise<AddressLookupTableAccount[]>;
export declare function prepareV0Transaction(connection: Connection, payer: PublicKey, instructions: TransactionInstruction[], addressLookupTables?: (PublicKey | AddressLookupTableAccount)[]): Promise<NonCompiledTransaction>;
export {};
//# sourceMappingURL=utils.d.ts.map