/// <reference types="bn.js" />
/// <reference types="node" />
import { Buffer } from "buffer";
import { Commitment, Connection, PublicKey, TransactionInstruction } from "@solana/web3.js";
import { Program, BN } from "@coral-xyz/anchor";
import { dlnSrcResolver } from "@debridge-finance/solana-utils";
import { OrderData, OrderDataWithId, OrderWithoutNonce } from "../order";
import { AbsoluteAffiliateFee, Address, GiveOrderStatus, OrderMeta } from "../common.types";
import { Logger } from "../common/logger";
import { Env } from "../common/env";
import { DlnSrc } from "./idl/src";
import { DlnSrc as DlnSrcHanoi } from "./idl/hanoi_src";
type SolanaAffiliateFee = {
    amount: bigint;
    beneficiary: PublicKey | string;
};
type SrcProgramType = Program<DlnSrc> | Program<DlnSrcHanoi>;
export declare class DLNSrc {
    private readonly logger;
    private readonly version;
    program: SrcProgramType;
    accountsResolver: ReturnType<typeof dlnSrcResolver>["methods"];
    state: Awaited<ReturnType<SrcProgramType["account"]["state"]["fetchNullable"]>>;
    constructor(programId: PublicKey | string, connection: Connection, logger: Logger, version?: Env);
    setConnection(connection: Connection): void;
    getOrderFromTransaction(txId: string): Promise<(OrderDataWithId & OrderMeta & {
        affiliateInfo: AbsoluteAffiliateFee | undefined;
    }) | null>;
    getState(): Promise<{
        protocolAuthority: PublicKey;
        fixedFee: BN;
        percentFeeBps: BN;
        isFeeRefund: boolean;
        feeBeneficiary: PublicKey;
        bump: number;
        stopTap: PublicKey;
        isWorking: boolean;
    }>;
    getFees(amount?: bigint): Promise<{
        fixFee: bigint;
        transferFee: bigint;
        transferFeeBps: number;
    }>;
    getGiveOrderState(orderId: string | Uint8Array, commitment?: Commitment): Promise<null | GiveOrderStatus>;
    getCreateCost(ataRent: number, maker: Address): Promise<number>;
    /**
     *
     * @param order order data with order id
     * @param amount amount to add to order.give part
     * @returns transaction to modify give part of the order
     */
    patchGive(order: OrderDataWithId, amount: bigint): Promise<import("@solana/web3.js").Transaction>;
    createOrder(order: OrderWithoutNonce | OrderData, referralCode?: number, affiliateFee?: SolanaAffiliateFee, makerWallet?: PublicKey, metadata?: Buffer): Promise<TransactionInstruction>;
    withdrawAffiliateFee(orderId: Uint8Array | Buffer | string, beneficiary: PublicKey, beneficiaryWallet: PublicKey): Promise<import("@solana/web3.js").Transaction>;
}
export {};
//# sourceMappingURL=dlnSrc.d.ts.map