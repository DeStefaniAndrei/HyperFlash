import { Address, ChainId, TokenInfo, TokenInfoWithAmount } from "../common.types";
import { Logger } from "../common/logger";
import { PriceTokenService } from "./price.token.service";
type UniversalPriceTokenServiceOpts = Partial<{
    coingeckoApiKey: string;
    coingeckoCacheTTL: number;
}>;
/**
 * A price token service with predefined immutable configuration suitable for DLN API and dln-taker
 * It uses CoingeckoPriceFeed with 5m cache under the hood, and overrides some popular intermediary
 * tokens used inside buckets
 */
export declare class UniversalPriceTokenService extends PriceTokenService {
    #private;
    constructor(opts?: UniversalPriceTokenServiceOpts);
    getPrice(chainId: ChainId, token: Uint8Array | null, context: {
        logger: Logger;
    }): Promise<number>;
    calculateRelativeAmount(tokenIn: TokenInfoWithAmount, tokenOut: TokenInfo, intermediary?: Address): Promise<bigint | undefined>;
    getNominalPrice(token: TokenInfo, nominal?: Address): Promise<bigint | undefined>;
}
export {};
//# sourceMappingURL=universalPriceFeed.d.ts.map