import { Address, ChainId, TokenInfo, TokenInfoWithAmount } from "../common.types";
import { Logger } from "../common/logger";
import { PriceTokenService } from "./price.token.service";
type PriceSource = {
    type: "redirect";
    chainId: ChainId;
    token: Uint8Array;
} | {
    type: "fixed";
    hardcodedPrice: number;
} | {
    type: "compute";
    func: (chainId: ChainId, token: Uint8Array, context: {
        logger: Logger;
    }) => Promise<number>;
};
export type PriceSourceMap = {
    [key in ChainId]?: {
        [remappedToken: string]: PriceSource;
    };
};
export declare class MappedPriceFeed extends PriceTokenService {
    #private;
    constructor(mapping?: PriceSourceMap, defaultPriceTokenService?: PriceTokenService);
    getPrice(chainId: ChainId, token: Uint8Array | null, context: {
        logger: Logger;
    }): Promise<number>;
    calculateRelativeAmount(tokenIn: TokenInfoWithAmount, tokenOut: TokenInfo, intermediary?: Address): Promise<bigint | undefined>;
    getNominalPrice(token: TokenInfo, nominal?: Address): Promise<bigint | undefined>;
    private findRemapping;
    private remapSource;
    private getNativeAddress;
}
export {};
//# sourceMappingURL=mappedPriceTokenService.d.ts.map