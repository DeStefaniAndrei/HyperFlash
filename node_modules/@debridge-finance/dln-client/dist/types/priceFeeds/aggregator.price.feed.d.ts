import { GetDecimalsLambda, SwapConnector, TokenInfoWithAmount, TokenInfo, Logger } from "..";
import { ChainId } from "../common.types";
import { PriceTokenService } from "./price.token.service";
type BaseStablecoins = {
    [key in ChainId]?: [token: string | Uint8Array, decimals: number];
};
export declare class AggregatorPriceTokenService extends PriceTokenService {
    #private;
    constructor(decimalsGetter: GetDecimalsLambda, swapConnectorGetter: SwapConnector | (() => SwapConnector), config?: BaseStablecoins);
    getPrice(chain: ChainId, token: Uint8Array | null, context: {
        logger: Logger;
    }): Promise<number>;
    calculateRelativeAmount(tokenIn: TokenInfoWithAmount, tokenOut: TokenInfo, intermediary?: Uint8Array | undefined): Promise<bigint | undefined>;
    getNominalPrice(token: TokenInfo, nominal?: Uint8Array | undefined): Promise<bigint | undefined>;
}
export {};
//# sourceMappingURL=aggregator.price.feed.d.ts.map