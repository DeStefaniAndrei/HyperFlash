var _SwapConnectorLogger_requestWatermark, _SwapConnectorLogger_baseLogger, _SwapConnectorLogger_swapConnector, _SwapConnectorLogger_context, _SwapConnectorLogger_maskCredentialFunction;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { randomBytes } from "crypto";
import { Logger } from "../common/logger";
export class SwapConnectorLogger extends Logger {
    constructor(baseLogger, swapConnector, maskCredentialFunction) {
        super();
        _SwapConnectorLogger_requestWatermark.set(this, randomBytes(16).toString("hex"));
        _SwapConnectorLogger_baseLogger.set(this, void 0);
        _SwapConnectorLogger_swapConnector.set(this, void 0);
        _SwapConnectorLogger_context.set(this, void 0);
        _SwapConnectorLogger_maskCredentialFunction.set(this, void 0);
        __classPrivateFieldSet(this, _SwapConnectorLogger_baseLogger, baseLogger, "f");
        __classPrivateFieldSet(this, _SwapConnectorLogger_swapConnector, swapConnector, "f");
        __classPrivateFieldSet(this, _SwapConnectorLogger_context, `[${__classPrivateFieldGet(this, _SwapConnectorLogger_swapConnector, "f")} requestWatermark ${__classPrivateFieldGet(this, _SwapConnectorLogger_requestWatermark, "f")}]`, "f");
        __classPrivateFieldSet(this, _SwapConnectorLogger_maskCredentialFunction, maskCredentialFunction, "f");
    }
    message(level, ...params) {
        if (params[0] && typeof params[0] === "object" && typeof params[1] === "string") {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const ctx = params[0];
            Object.keys(ctx).forEach(
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            (key) => (ctx[key] = typeof ctx[key] === "string" ? __classPrivateFieldGet(this, _SwapConnectorLogger_maskCredentialFunction, "f").call(this, ctx[key]) : ctx[key]));
            __classPrivateFieldGet(this, _SwapConnectorLogger_baseLogger, "f")[level](ctx, `${__classPrivateFieldGet(this, _SwapConnectorLogger_context, "f")} ${__classPrivateFieldGet(this, _SwapConnectorLogger_maskCredentialFunction, "f").call(this, params[1])}`);
        }
        else {
            const ctx = params.map(__classPrivateFieldGet(this, _SwapConnectorLogger_maskCredentialFunction, "f"));
            __classPrivateFieldGet(this, _SwapConnectorLogger_baseLogger, "f")[level](`${__classPrivateFieldGet(this, _SwapConnectorLogger_context, "f")}`, ...ctx);
        }
    }
    /**
     * @param params any arrays or (object, string) for structured log
     * @returns void
     */
    verbose(...params) {
        return this.message("verbose", ...params);
    }
    /**
     * @param params any arrays or (object, string) for structured log
     * @returns void
     */
    log(...params) {
        return this.message("log", ...params);
    }
    /**
     * @param params any arrays or (object, string) for structured log
     * @returns void
     */
    error(...params) {
        return this.message("error", ...params);
    }
}
_SwapConnectorLogger_requestWatermark = new WeakMap(), _SwapConnectorLogger_baseLogger = new WeakMap(), _SwapConnectorLogger_swapConnector = new WeakMap(), _SwapConnectorLogger_context = new WeakMap(), _SwapConnectorLogger_maskCredentialFunction = new WeakMap();
//# sourceMappingURL=swap-connector.logger.js.map