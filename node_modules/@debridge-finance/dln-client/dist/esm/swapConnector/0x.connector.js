var _ZeroXSwapConnector_instances, _ZeroXSwapConnector_URL_PER_CHAIN, _ZeroXSwapConnector_apiKey, _ZeroXSwapConnector_customSources, _ZeroXSwapConnector_maskCredentialFunction, _ZeroXSwapConnector_feeRecipientTradeSurplus, _ZeroXSwapConnector_timeoutInMs, _ZeroXSwapConnector_call0x, _ZeroXSwapConnector_getUrlByChain, _ZeroXSwapConnector_nativeAddressToEvmFormat, _ZeroXSwapConnector_fixEvmNativeAddress;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { helpers } from "@debridge-finance/solana-utils";
import { ChainId } from "../common.types";
import { bpsToPercent, SwapConnector, } from "./swap.connector";
import { SwapConnectorErrorType } from "./errors/swap-connector-error.type";
import { SwapConnectorError } from "./errors/swap-connector.error";
import { SwapConnectorLogger } from "./swap-connector.logger";
var ZeroXSupportedChainId;
(function (ZeroXSupportedChainId) {
    ZeroXSupportedChainId[ZeroXSupportedChainId["Ethereum"] = 1] = "Ethereum";
    ZeroXSupportedChainId[ZeroXSupportedChainId["BSC"] = 56] = "BSC";
    ZeroXSupportedChainId[ZeroXSupportedChainId["Arbitrum"] = 42161] = "Arbitrum";
    ZeroXSupportedChainId[ZeroXSupportedChainId["Avalanche"] = 43114] = "Avalanche";
    ZeroXSupportedChainId[ZeroXSupportedChainId["Optimism"] = 10] = "Optimism";
    ZeroXSupportedChainId[ZeroXSupportedChainId["Polygon"] = 137] = "Polygon";
    ZeroXSupportedChainId[ZeroXSupportedChainId["Fantom"] = 250] = "Fantom";
    ZeroXSupportedChainId[ZeroXSupportedChainId["Base"] = 8453] = "Base";
})(ZeroXSupportedChainId || (ZeroXSupportedChainId = {}));
export class ZeroXSwapConnector extends SwapConnector {
    constructor(apiKey, customSources, feeRecipientTradeSurplus, timeoutInMs) {
        super();
        _ZeroXSwapConnector_instances.add(this);
        _ZeroXSwapConnector_URL_PER_CHAIN.set(this, {
            [ZeroXSupportedChainId.Ethereum]: "",
            [ZeroXSupportedChainId.Polygon]: "polygon.",
            [ZeroXSupportedChainId.BSC]: "bsc.",
            [ZeroXSupportedChainId.Optimism]: "optimism.",
            [ZeroXSupportedChainId.Fantom]: "fantom.",
            [ZeroXSupportedChainId.Avalanche]: "avalanche.",
            [ZeroXSupportedChainId.Arbitrum]: "arbitrum.",
            [ZeroXSupportedChainId.Base]: "base.",
        });
        _ZeroXSwapConnector_apiKey.set(this, void 0);
        _ZeroXSwapConnector_customSources.set(this, void 0);
        _ZeroXSwapConnector_maskCredentialFunction.set(this, void 0);
        _ZeroXSwapConnector_feeRecipientTradeSurplus.set(this, void 0);
        _ZeroXSwapConnector_timeoutInMs.set(this, void 0);
        __classPrivateFieldSet(this, _ZeroXSwapConnector_feeRecipientTradeSurplus, feeRecipientTradeSurplus, "f");
        __classPrivateFieldSet(this, _ZeroXSwapConnector_apiKey, apiKey, "f");
        __classPrivateFieldSet(this, _ZeroXSwapConnector_customSources, customSources, "f");
        __classPrivateFieldSet(this, _ZeroXSwapConnector_maskCredentialFunction, (text) => text.replaceAll(apiKey, "<API KEY>"), "f");
        __classPrivateFieldSet(this, _ZeroXSwapConnector_timeoutInMs, timeoutInMs, "f");
    }
    getSupportedChains() {
        return Object.values(ZeroXSupportedChainId)
            .filter((v) => typeof v === "number")
            .map((_) => Number(_));
    }
    async getEstimate(request, context) {
        const logger = new SwapConnectorLogger(context.logger, ZeroXSwapConnector.name, __classPrivateFieldGet(this, _ZeroXSwapConnector_maskCredentialFunction, "f"));
        if (!this.getSupportedChains().includes(request.chainId)) {
            const message = `Chain ${ChainId[request.chainId]} is not supported`;
            throw new SwapConnectorError(ZeroXSwapConnector.name, SwapConnectorErrorType.UnsupportedChain, message);
        }
        const params = new URLSearchParams({
            buyToken: __classPrivateFieldGet(this, _ZeroXSwapConnector_instances, "m", _ZeroXSwapConnector_nativeAddressToEvmFormat).call(this, request.toTokenAddress),
            sellToken: __classPrivateFieldGet(this, _ZeroXSwapConnector_instances, "m", _ZeroXSwapConnector_nativeAddressToEvmFormat).call(this, request.fromTokenAddress),
            sellAmount: request.amountIn.toString(),
            skipValidation: "true",
            slippagePercentage: `${bpsToPercent(request.slippageBps) / 100}`,
        });
        if (__classPrivateFieldGet(this, _ZeroXSwapConnector_feeRecipientTradeSurplus, "f")) {
            params.append("feeRecipientTradeSurplus", __classPrivateFieldGet(this, _ZeroXSwapConnector_feeRecipientTradeSurplus, "f"));
        }
        if (__classPrivateFieldGet(this, _ZeroXSwapConnector_customSources, "f")) {
            if (__classPrivateFieldGet(this, _ZeroXSwapConnector_customSources, "f").type === "excluded") {
                params.append("excludedSources", __classPrivateFieldGet(this, _ZeroXSwapConnector_customSources, "f").excluded.join(","));
            }
            else if (__classPrivateFieldGet(this, _ZeroXSwapConnector_customSources, "f").type === "included") {
                params.append("includedSources", __classPrivateFieldGet(this, _ZeroXSwapConnector_customSources, "f").included.join(","));
            }
        }
        const response = await __classPrivateFieldGet(this, _ZeroXSwapConnector_instances, "m", _ZeroXSwapConnector_call0x).call(this, request.chainId, "/swap/v1/quote", params, logger);
        return {
            amountIn: BigInt(response.sellAmount),
            amountOut: BigInt(response.buyAmount),
            chainId: Number(request.chainId),
            fromTokenAddress: __classPrivateFieldGet(this, _ZeroXSwapConnector_instances, "m", _ZeroXSwapConnector_fixEvmNativeAddress).call(this, response.sellTokenAddress),
            toTokenAddress: __classPrivateFieldGet(this, _ZeroXSwapConnector_instances, "m", _ZeroXSwapConnector_fixEvmNativeAddress).call(this, response.buyTokenAddress),
            rawConnectorResponse: response,
        };
    }
    async getSwap(request, context) {
        if (!this.getSupportedChains().includes(request.chainId)) {
            const message = `Chain ${ChainId[request.chainId]} is not supported`;
            throw new SwapConnectorError(ZeroXSwapConnector.name, SwapConnectorErrorType.UnsupportedChain, message);
        }
        const logger = new SwapConnectorLogger(context.logger, ZeroXSwapConnector.name, __classPrivateFieldGet(this, _ZeroXSwapConnector_maskCredentialFunction, "f"));
        const params = new URLSearchParams({
            buyToken: __classPrivateFieldGet(this, _ZeroXSwapConnector_instances, "m", _ZeroXSwapConnector_nativeAddressToEvmFormat).call(this, request.toTokenAddress),
            sellToken: __classPrivateFieldGet(this, _ZeroXSwapConnector_instances, "m", _ZeroXSwapConnector_nativeAddressToEvmFormat).call(this, request.fromTokenAddress),
            sellAmount: request.amountIn.toString(),
            skipValidation: "true",
            takerAddress: helpers.bufferToHex(request.fromAddress),
            slippagePercentage: `${bpsToPercent(request.slippageBps) / 100}`,
        });
        if (__classPrivateFieldGet(this, _ZeroXSwapConnector_feeRecipientTradeSurplus, "f")) {
            params.append("feeRecipientTradeSurplus", __classPrivateFieldGet(this, _ZeroXSwapConnector_feeRecipientTradeSurplus, "f"));
        }
        if (__classPrivateFieldGet(this, _ZeroXSwapConnector_customSources, "f")) {
            if (__classPrivateFieldGet(this, _ZeroXSwapConnector_customSources, "f").type === "excluded") {
                params.append("excludedSources", __classPrivateFieldGet(this, _ZeroXSwapConnector_customSources, "f").excluded.join(","));
            }
            else if (__classPrivateFieldGet(this, _ZeroXSwapConnector_customSources, "f").type === "included") {
                params.append("includedSources", __classPrivateFieldGet(this, _ZeroXSwapConnector_customSources, "f").included.join(","));
            }
        }
        const response = await __classPrivateFieldGet(this, _ZeroXSwapConnector_instances, "m", _ZeroXSwapConnector_call0x).call(this, request.chainId, "/swap/v1/quote", params, logger);
        return {
            amountIn: BigInt(response.sellAmount),
            amountOut: BigInt(response.buyAmount),
            engine: "evm",
            tx: {
                data: response.data,
                to: response.to,
                value: response.value,
            },
            fromToken: __classPrivateFieldGet(this, _ZeroXSwapConnector_instances, "m", _ZeroXSwapConnector_fixEvmNativeAddress).call(this, response.sellTokenAddress),
            toToken: __classPrivateFieldGet(this, _ZeroXSwapConnector_instances, "m", _ZeroXSwapConnector_fixEvmNativeAddress).call(this, response.buyTokenAddress),
            rawConnectorResponse: response,
        };
    }
    get connectorName() {
        return "0x";
    }
}
_ZeroXSwapConnector_URL_PER_CHAIN = new WeakMap(), _ZeroXSwapConnector_apiKey = new WeakMap(), _ZeroXSwapConnector_customSources = new WeakMap(), _ZeroXSwapConnector_maskCredentialFunction = new WeakMap(), _ZeroXSwapConnector_feeRecipientTradeSurplus = new WeakMap(), _ZeroXSwapConnector_timeoutInMs = new WeakMap(), _ZeroXSwapConnector_instances = new WeakSet(), _ZeroXSwapConnector_call0x = async function _ZeroXSwapConnector_call0x(chainId, path, query, logger) {
    try {
        return await this.call({
            basicUrl: __classPrivateFieldGet(this, _ZeroXSwapConnector_instances, "m", _ZeroXSwapConnector_getUrlByChain).call(this, chainId),
            path,
            query,
            headers: {
                "0x-api-key": __classPrivateFieldGet(this, _ZeroXSwapConnector_apiKey, "f"),
            },
            timeoutInMs: __classPrivateFieldGet(this, _ZeroXSwapConnector_timeoutInMs, "f"),
        }, {
            logger,
        });
    }
    catch (e) {
        const error = e;
        throw new SwapConnectorError(ZeroXSwapConnector.name, SwapConnectorErrorType.InternalError, error.message);
    }
}, _ZeroXSwapConnector_getUrlByChain = function _ZeroXSwapConnector_getUrlByChain(chainId) {
    if (!this.getSupportedChains().includes(chainId)) {
        const message = `Chain ${ChainId[chainId]} is not supported`;
        throw new SwapConnectorError(ZeroXSwapConnector.name, SwapConnectorErrorType.UnsupportedChain, message);
    }
    const mappedChain = __classPrivateFieldGet(this, _ZeroXSwapConnector_URL_PER_CHAIN, "f")[chainId];
    return `https://${mappedChain}api.0x.org`;
}, _ZeroXSwapConnector_nativeAddressToEvmFormat = function _ZeroXSwapConnector_nativeAddressToEvmFormat(address) {
    let stringified = helpers.bufferToHex(address);
    if (stringified === "0x0000000000000000000000000000000000000000") {
        stringified = "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE";
    }
    return stringified;
}, _ZeroXSwapConnector_fixEvmNativeAddress = function _ZeroXSwapConnector_fixEvmNativeAddress(evmFormat) {
    const evmNative = helpers.hexToBuffer("0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE");
    const address = helpers.hexToBuffer(evmFormat);
    return address.equals(evmNative) ? Buffer.alloc(20) : address;
};
//# sourceMappingURL=0x.connector.js.map