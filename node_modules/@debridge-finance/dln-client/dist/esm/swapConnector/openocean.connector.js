var _OpenOceanSwapConnector_instances, _OpenOceanSwapConnector_apiKey, _OpenOceanSwapConnector_getDecimalsLambda, _OpenOceanSwapConnector_getGasPriceLambda, _OpenOceanSwapConnector_disabledDexIds, _OpenOceanSwapConnector_enabledDexIds, _OpenOceanSwapConnector_maskCredentialFunction, _OpenOceanSwapConnector_basicUrl, _OpenOceanSwapConnector_timeoutInMs, _OpenOceanSwapConnector_referrer, _OpenOceanSwapConnector_callOpenOcean, _OpenOceanSwapConnector_mapChainId, _OpenOceanSwapConnector_mapAddress, _OpenOceanSwapConnector_deleteAmountDecimals, _OpenOceanSwapConnector_getGasPrice;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { helpers } from "@debridge-finance/solana-utils";
import BigNumber from "bignumber.js";
import Web3 from "web3";
import { ChainId } from "../common.types";
import { bpsToPercent, SwapConnector, } from "./swap.connector";
import { SwapConnectorErrorType } from "./errors/swap-connector-error.type";
import { SwapConnectorError } from "./errors/swap-connector.error";
import { SwapConnectorLogger } from "./swap-connector.logger";
var OpenOceanSupportedChainId;
(function (OpenOceanSupportedChainId) {
    OpenOceanSupportedChainId[OpenOceanSupportedChainId["Ethereum"] = 1] = "Ethereum";
    OpenOceanSupportedChainId[OpenOceanSupportedChainId["BSC"] = 56] = "BSC";
    OpenOceanSupportedChainId[OpenOceanSupportedChainId["Arbitrum"] = 42161] = "Arbitrum";
    OpenOceanSupportedChainId[OpenOceanSupportedChainId["Avalanche"] = 43114] = "Avalanche";
    OpenOceanSupportedChainId[OpenOceanSupportedChainId["Optimism"] = 10] = "Optimism";
    OpenOceanSupportedChainId[OpenOceanSupportedChainId["Polygon"] = 137] = "Polygon";
    OpenOceanSupportedChainId[OpenOceanSupportedChainId["Base"] = 8453] = "Base";
    OpenOceanSupportedChainId[OpenOceanSupportedChainId["Linea"] = 59144] = "Linea";
    OpenOceanSupportedChainId[OpenOceanSupportedChainId["Gnosis"] = 100000002] = "Gnosis";
    OpenOceanSupportedChainId[OpenOceanSupportedChainId["Metis"] = 100000004] = "Metis";
})(OpenOceanSupportedChainId || (OpenOceanSupportedChainId = {}));
export const openOceanNativeTokens = {
    [OpenOceanSupportedChainId.Ethereum]: "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
    [OpenOceanSupportedChainId.BSC]: "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
    [OpenOceanSupportedChainId.Arbitrum]: "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
    [OpenOceanSupportedChainId.Avalanche]: "0x0000000000000000000000000000000000000000",
    [OpenOceanSupportedChainId.Optimism]: "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
    [OpenOceanSupportedChainId.Polygon]: "0x0000000000000000000000000000000000001010",
    [OpenOceanSupportedChainId.Base]: "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
    [OpenOceanSupportedChainId.Linea]: "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
    [OpenOceanSupportedChainId.Gnosis]: "0x0000000000000000000000000000000000000000",
    [OpenOceanSupportedChainId.Metis]: "0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000",
};
export const openOceanIaaSChainMapper = {
    [OpenOceanSupportedChainId.Gnosis]: 100,
    [OpenOceanSupportedChainId.Metis]: 1088,
};
export class OpenOceanSwapConnector extends SwapConnector {
    constructor(config) {
        super();
        _OpenOceanSwapConnector_instances.add(this);
        _OpenOceanSwapConnector_apiKey.set(this, void 0);
        _OpenOceanSwapConnector_getDecimalsLambda.set(this, void 0);
        _OpenOceanSwapConnector_getGasPriceLambda.set(this, void 0);
        _OpenOceanSwapConnector_disabledDexIds.set(this, void 0);
        _OpenOceanSwapConnector_enabledDexIds.set(this, void 0);
        _OpenOceanSwapConnector_maskCredentialFunction.set(this, void 0);
        _OpenOceanSwapConnector_basicUrl.set(this, "https://open-api-pro.openocean.finance");
        _OpenOceanSwapConnector_timeoutInMs.set(this, void 0);
        _OpenOceanSwapConnector_referrer.set(this, void 0);
        __classPrivateFieldSet(this, _OpenOceanSwapConnector_apiKey, config.apiKey, "f");
        __classPrivateFieldSet(this, _OpenOceanSwapConnector_disabledDexIds, config.disabledDexIds || [], "f");
        __classPrivateFieldSet(this, _OpenOceanSwapConnector_enabledDexIds, config.enabledDexIds || [], "f");
        __classPrivateFieldSet(this, _OpenOceanSwapConnector_maskCredentialFunction, (text) => text.replaceAll(config.apiKey, "<API KEY>"), "f");
        __classPrivateFieldSet(this, _OpenOceanSwapConnector_timeoutInMs, config.timeoutInMs, "f");
        __classPrivateFieldSet(this, _OpenOceanSwapConnector_getDecimalsLambda, config.getDecimalsLambda, "f");
        __classPrivateFieldSet(this, _OpenOceanSwapConnector_getGasPriceLambda, config.getGasPriceLambda, "f");
        __classPrivateFieldSet(this, _OpenOceanSwapConnector_referrer, config.referrer, "f");
    }
    getSupportedChains() {
        return Object.values(OpenOceanSupportedChainId)
            .filter((v) => typeof v === "number")
            .map((_) => Number(_));
    }
    async getEstimate(request, context) {
        const logger = new SwapConnectorLogger(context.logger, OpenOceanSwapConnector.name, __classPrivateFieldGet(this, _OpenOceanSwapConnector_maskCredentialFunction, "f"));
        if (!this.getSupportedChains().includes(request.chainId)) {
            const message = `Chain ${ChainId[request.chainId]} is not supported`;
            throw new SwapConnectorError(OpenOceanSwapConnector.name, SwapConnectorErrorType.UnsupportedChain, message);
        }
        const chainId = request.chainId;
        const requestBody = {
            inTokenAddress: __classPrivateFieldGet(this, _OpenOceanSwapConnector_instances, "m", _OpenOceanSwapConnector_mapAddress).call(this, chainId, request.fromTokenAddress),
            outTokenAddress: __classPrivateFieldGet(this, _OpenOceanSwapConnector_instances, "m", _OpenOceanSwapConnector_mapAddress).call(this, chainId, request.toTokenAddress),
            amount: await __classPrivateFieldGet(this, _OpenOceanSwapConnector_instances, "m", _OpenOceanSwapConnector_deleteAmountDecimals).call(this, chainId, request.fromTokenAddress, request.amountIn),
            gasPrice: (await __classPrivateFieldGet(this, _OpenOceanSwapConnector_instances, "m", _OpenOceanSwapConnector_getGasPrice).call(this, chainId)).toString(),
        };
        const params = new URLSearchParams(requestBody);
        if (__classPrivateFieldGet(this, _OpenOceanSwapConnector_disabledDexIds, "f").length) {
            params.append("disabledDexIds", __classPrivateFieldGet(this, _OpenOceanSwapConnector_disabledDexIds, "f").join(","));
        }
        if (__classPrivateFieldGet(this, _OpenOceanSwapConnector_enabledDexIds, "f").length) {
            params.append("enabledDexIds", __classPrivateFieldGet(this, _OpenOceanSwapConnector_enabledDexIds, "f").join(","));
        }
        const response = await __classPrivateFieldGet(this, _OpenOceanSwapConnector_instances, "m", _OpenOceanSwapConnector_callOpenOcean).call(this, `/v4/${__classPrivateFieldGet(this, _OpenOceanSwapConnector_instances, "m", _OpenOceanSwapConnector_mapChainId).call(this, request.chainId)}/quote`, params, logger);
        return {
            amountIn: BigInt(response.data.inAmount),
            amountOut: BigInt(response.data.outAmount),
            chainId: request.chainId,
            fromTokenAddress: request.fromTokenAddress,
            toTokenAddress: request.toTokenAddress,
            rawConnectorResponse: response,
        };
    }
    async getSwap(request, context) {
        if (!this.getSupportedChains().includes(request.chainId)) {
            const message = `Chain ${ChainId[request.chainId]} is not supported`;
            throw new SwapConnectorError(OpenOceanSwapConnector.name, SwapConnectorErrorType.UnsupportedChain, message);
        }
        const logger = new SwapConnectorLogger(context.logger, OpenOceanSwapConnector.name, __classPrivateFieldGet(this, _OpenOceanSwapConnector_maskCredentialFunction, "f"));
        const chainId = request.chainId;
        const requestBody = {
            inTokenAddress: __classPrivateFieldGet(this, _OpenOceanSwapConnector_instances, "m", _OpenOceanSwapConnector_mapAddress).call(this, chainId, request.fromTokenAddress),
            outTokenAddress: __classPrivateFieldGet(this, _OpenOceanSwapConnector_instances, "m", _OpenOceanSwapConnector_mapAddress).call(this, chainId, request.toTokenAddress),
            amount: await __classPrivateFieldGet(this, _OpenOceanSwapConnector_instances, "m", _OpenOceanSwapConnector_deleteAmountDecimals).call(this, chainId, request.fromTokenAddress, request.amountIn),
            gasPrice: (await __classPrivateFieldGet(this, _OpenOceanSwapConnector_instances, "m", _OpenOceanSwapConnector_getGasPrice).call(this, chainId)).toString(),
            slippage: bpsToPercent(request.slippageBps).toString(),
            account: helpers.bufferToHex(request.fromAddress),
        };
        const params = new URLSearchParams(requestBody);
        if (__classPrivateFieldGet(this, _OpenOceanSwapConnector_disabledDexIds, "f").length) {
            params.append("disabledDexIds", __classPrivateFieldGet(this, _OpenOceanSwapConnector_disabledDexIds, "f").join(","));
        }
        if (__classPrivateFieldGet(this, _OpenOceanSwapConnector_enabledDexIds, "f").length) {
            params.append("enabledDexIds", __classPrivateFieldGet(this, _OpenOceanSwapConnector_enabledDexIds, "f").join(","));
        }
        if (__classPrivateFieldGet(this, _OpenOceanSwapConnector_referrer, "f")) {
            params.append("referrer", __classPrivateFieldGet(this, _OpenOceanSwapConnector_referrer, "f"));
        }
        const response = await __classPrivateFieldGet(this, _OpenOceanSwapConnector_instances, "m", _OpenOceanSwapConnector_callOpenOcean).call(this, `/v4/${__classPrivateFieldGet(this, _OpenOceanSwapConnector_instances, "m", _OpenOceanSwapConnector_mapChainId).call(this, request.chainId)}/swap`, params, logger);
        return {
            amountIn: BigInt(response.data.inAmount),
            amountOut: BigInt(response.data.outAmount),
            engine: "evm",
            tx: {
                data: response.data.data,
                to: response.data.to,
                value: response.data.value,
            },
            fromToken: request.fromTokenAddress,
            toToken: request.toTokenAddress,
            rawConnectorResponse: response,
        };
    }
    get connectorName() {
        return "OpenOcean";
    }
}
_OpenOceanSwapConnector_apiKey = new WeakMap(), _OpenOceanSwapConnector_getDecimalsLambda = new WeakMap(), _OpenOceanSwapConnector_getGasPriceLambda = new WeakMap(), _OpenOceanSwapConnector_disabledDexIds = new WeakMap(), _OpenOceanSwapConnector_enabledDexIds = new WeakMap(), _OpenOceanSwapConnector_maskCredentialFunction = new WeakMap(), _OpenOceanSwapConnector_basicUrl = new WeakMap(), _OpenOceanSwapConnector_timeoutInMs = new WeakMap(), _OpenOceanSwapConnector_referrer = new WeakMap(), _OpenOceanSwapConnector_instances = new WeakSet(), _OpenOceanSwapConnector_callOpenOcean = async function _OpenOceanSwapConnector_callOpenOcean(path, query, logger) {
    try {
        return await this.call({
            basicUrl: __classPrivateFieldGet(this, _OpenOceanSwapConnector_basicUrl, "f"),
            path,
            query,
            headers: {
                apikey: __classPrivateFieldGet(this, _OpenOceanSwapConnector_apiKey, "f"),
            },
            timeoutInMs: __classPrivateFieldGet(this, _OpenOceanSwapConnector_timeoutInMs, "f"),
        }, {
            logger,
        });
    }
    catch (e) {
        const error = e;
        throw new SwapConnectorError(OpenOceanSwapConnector.name, SwapConnectorErrorType.InternalError, error.message);
    }
}, _OpenOceanSwapConnector_mapChainId = function _OpenOceanSwapConnector_mapChainId(chainId) {
    return openOceanIaaSChainMapper[chainId] || chainId;
}, _OpenOceanSwapConnector_mapAddress = function _OpenOceanSwapConnector_mapAddress(chainId, address) {
    let stringified = helpers.bufferToHex(address);
    if (stringified === "0x0000000000000000000000000000000000000000") {
        const nativeToken = openOceanNativeTokens[chainId];
        if (!nativeToken)
            throw new SwapConnectorError(OpenOceanSwapConnector.name, SwapConnectorErrorType.InternalError, `Not mapped native token`);
        stringified = nativeToken;
    }
    return stringified;
}, _OpenOceanSwapConnector_deleteAmountDecimals = async function _OpenOceanSwapConnector_deleteAmountDecimals(chainId, tokenAddress, amount) {
    const decimals = await __classPrivateFieldGet(this, _OpenOceanSwapConnector_getDecimalsLambda, "f").call(this, chainId, tokenAddress);
    return new BigNumber(amount.toString()).div((10 ** decimals).toString()).toString();
}, _OpenOceanSwapConnector_getGasPrice = async function _OpenOceanSwapConnector_getGasPrice(chainId) {
    const gasPrice = await __classPrivateFieldGet(this, _OpenOceanSwapConnector_getGasPriceLambda, "f").call(this, chainId);
    return Web3.utils.fromWei(gasPrice, "gwei");
};
//# sourceMappingURL=openocean.connector.js.map