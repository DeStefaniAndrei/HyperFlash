import { ContractCache } from "../utils/contract-cache.class";
import DeBridgeGate from "../../assets/abi/DeBridgeGate.json";
export class DebridgeGateService extends ContractCache {
    constructor(enableContractsCache = true) {
        super(enableContractsCache);
    }
    async getGlobalFixedNativeFee(provider, contractAddress) {
        const contract = this.getContract(provider, contractAddress);
        const result = await contract.methods.globalFixedNativeFee().call({});
        return result?.toString() || "0";
    }
    async getGlobalTransferFeeBps(provider, contractAddress) {
        const contract = this.getContract(provider, contractAddress);
        const result = await contract.methods.globalTransferFeeBps().call({});
        return result?.toString() || "0";
    }
    async weth(provider, contractAddress) {
        const contract = this.getContract(provider, contractAddress);
        const result = await contract.methods.weth().call({});
        return result;
    }
    createContract(provider, contractAddress) {
        return new provider.eth.Contract(DeBridgeGate.abi, contractAddress);
    }
}
//# sourceMappingURL=debridge-gate.service.js.map