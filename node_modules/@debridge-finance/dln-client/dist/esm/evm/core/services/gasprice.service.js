import BigNumber from "bignumber.js";
import NodeCache from "node-cache";
import { ChainId } from "../../../common.types";
let predictGasPriceNodeCache = new NodeCache({ stdTTL: 15 * 60 });
let predictGasPriceCachedChains = [ChainId.Neon];
export function setPredictGasPriceNodeCache(newNodeCache) {
    predictGasPriceNodeCache = newNodeCache;
}
export function setPredictGasPriceCachedChains(chains) {
    predictGasPriceCachedChains = chains;
}
export const predictGasPrice = async (chainId, provider, orderEstimationStage) => {
    let gasPrice;
    if (predictGasPriceNodeCache.has(chainId) && predictGasPriceCachedChains.includes(chainId)) {
        gasPrice = new BigNumber(predictGasPriceNodeCache.get(chainId));
    }
    else {
        const web3GasPrice = await provider.eth.getGasPrice();
        gasPrice = new BigNumber(web3GasPrice);
        if (predictGasPriceCachedChains.includes(chainId)) {
            predictGasPriceNodeCache.set(chainId, web3GasPrice);
        }
    }
    return gasPrice;
};
export const ETH_TRANSFER_REFERENCE = 21000;
export const getCorrectedGasLimit = async (chain, provider, estimation) => {
    const estimationBN = BigNumber(estimation);
    if (chain === ChainId.Arbitrum) {
        const transferTx = {
            from: "0x0aee3e5871254d40084a6758d85ac453c1f12fca",
            data: "0x",
            value: 1,
            to: "0x0aee3e5871254d40084a6758d85ac453c1f12fca",
        };
        // gas limit to transfer 1 wei in the Arbitrum network
        const arbGaslimitTransfer = await provider.eth.estimateGas(transferTx);
        /*
        current transfer / reference transfer = current estimation / reference estimation
        ->
        currentEstimation = (current transfer * reference estimation) / reference transfer
        */
        const result = estimationBN.multipliedBy(arbGaslimitTransfer).dividedBy(ETH_TRANSFER_REFERENCE);
        return result.integerValue();
    }
    else {
        return estimationBN.integerValue();
    }
};
//# sourceMappingURL=gasprice.service.js.map