var _CachePriceFeed_instances, _CachePriceFeed_cache, _CachePriceFeed_priceTokenService, _CachePriceFeed_getCacheKey;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import NodeCache from "node-cache";
import { fixDecimals, tokenAddressToString } from "../utils";
import { PriceTokenService } from "./price.token.service";
export class CachePriceFeed extends PriceTokenService {
    constructor(priceTokenService, ttl) {
        super();
        _CachePriceFeed_instances.add(this);
        _CachePriceFeed_cache.set(this, void 0);
        _CachePriceFeed_priceTokenService.set(this, void 0);
        __classPrivateFieldSet(this, _CachePriceFeed_priceTokenService, priceTokenService, "f");
        __classPrivateFieldSet(this, _CachePriceFeed_cache, new NodeCache({ stdTTL: ttl }), "f");
    }
    async calculateRelativeAmount(tokenIn, tokenOut, nominal) {
        // price of 10 ** inTokenDecimals in nominal token
        const inNominalPrice = await this.getNominalPrice(tokenIn, nominal);
        const outNominalPrice = await this.getNominalPrice(tokenOut, nominal);
        if (inNominalPrice === undefined || outNominalPrice === undefined)
            return undefined;
        return fixDecimals((inNominalPrice * tokenIn.amount) / outNominalPrice, tokenIn.decimals, tokenOut.decimals);
    }
    async getNominalPrice(token, nominal) {
        const cachedKey = `nominalPrice_chain_${token.chainId}_token_${tokenAddressToString(token.chainId, token.tokenAddress)}_nominal_${nominal ? tokenAddressToString(token.chainId, nominal) : "-"}`;
        const cachedValue = __classPrivateFieldGet(this, _CachePriceFeed_cache, "f").get(cachedKey);
        if (cachedValue) {
            return cachedValue;
        }
        const value = await __classPrivateFieldGet(this, _CachePriceFeed_priceTokenService, "f").getNominalPrice(token, nominal);
        __classPrivateFieldGet(this, _CachePriceFeed_cache, "f").set(cachedKey, value);
        return value;
    }
    async getPrice(chainId, token, context) {
        const logger = (...params) => context.logger.verbose(`[CachePriceFeed]`, ...params);
        const cachedKey = __classPrivateFieldGet(this, _CachePriceFeed_instances, "m", _CachePriceFeed_getCacheKey).call(this, chainId, token);
        const cachedValue = __classPrivateFieldGet(this, _CachePriceFeed_cache, "f").get(cachedKey);
        if (cachedValue) {
            logger("Cache hit:", cachedKey, JSON.stringify(cachedValue));
            return cachedValue;
        }
        logger("Cache missing", cachedKey);
        const value = await __classPrivateFieldGet(this, _CachePriceFeed_priceTokenService, "f").getPrice(chainId, token, context);
        __classPrivateFieldGet(this, _CachePriceFeed_cache, "f").set(cachedKey, value);
        return value;
    }
}
_CachePriceFeed_cache = new WeakMap(), _CachePriceFeed_priceTokenService = new WeakMap(), _CachePriceFeed_instances = new WeakSet(), _CachePriceFeed_getCacheKey = function _CachePriceFeed_getCacheKey(chainId, token) {
    return `CoingeckoPriceFeed$chainid=${chainId}$token=${token ? tokenAddressToString(chainId, token) : "-"}`;
};
//# sourceMappingURL=cachePriceTokenService.js.map