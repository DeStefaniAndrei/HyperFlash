/* eslint-disable no-console */
import { ChainId } from "../src";

import { initClients } from "./initClient";

const [solanaClient, , commonClient] = initClients();

/**
 * Get fees for order creation from solana, order give amount = BigInt(1e9).
 * Only ChainId.Solana accepted for chain argument for solana client
 * This will return fixFee (in native tokens), transferFee bps value and calculated transferFee amount (if amount was provided)
 */
const fees1 = await solanaClient.getFees(ChainId.Solana, BigInt(1e9));
console.log(fees1);

/**
 * You could also init common client (better way) and query fees using common interface for all chains.
 * Important! Client for requested chain should be initialized, e.g. you can't init Evm client for Bsc and Arbitrum and query Ethereum fees.
 * This will return same object as solana client or evm client `getFees` method
 */
const fees2 = await commonClient.getFees(ChainId.BSC);
console.log(fees2);
