/* eslint-disable no-console */
import { PublicKey } from "@solana/web3.js";

import { ChainEngine, OrderDataWithId } from "../src";

import { initClients } from "./initClient";

const [, , commonClient] = initClients();

let order: OrderDataWithId;
let unlockAddress: Buffer;
/**
 * By default `payload` contains intersection of all ClientImplementations contained in CommonDlnClient
 * You could specify which ChainEngine you're using to make payload and return type more specific
 */
const evmFulfillTx = await commonClient.fulfillOrder<ChainEngine.EVM>(
  { order: order! },
  { permit: "0x", unlockAuthority: unlockAddress! },
);

console.log(evmFulfillTx.value); // Evm instruction

let solanaUnlocker: PublicKey;
let giveChainBeneficiary: Buffer;

const solanaSendUnlockTx = await commonClient.sendUnlockOrder<ChainEngine.Solana>(
  { beneficiary: giveChainBeneficiary!, executionFee: BigInt(123), order: order! },
  { unlocker: solanaUnlocker!.toBuffer() },
);
